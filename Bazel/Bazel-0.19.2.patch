diff -Nru bazel-0.19.2.orig/tools/cpp/CROSSTOOL bazel-0.19.2/tools/cpp/CROSSTOOL
--- bazel-0.19.2.orig/tools/cpp/CROSSTOOL	2018-11-19 16:19:34.000000000 +0000
+++ bazel-0.19.2/tools/cpp/CROSSTOOL	2018-11-22 20:21:30.975653091 +0000
@@ -52,14 +52,14 @@
   target_system_name: "local"
   toolchain_identifier: "local_linux"
 
-  tool_path { name: "ar" path: "/usr/bin/ar" }
-  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "/usr/bin/dwp" }
-  tool_path { name: "gcc" path: "/usr/bin/gcc" }
+  tool_path { name: "ar" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ar" }
+  tool_path { name: "compat-ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin/gcc" }
+  tool_path { name: "dwp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
+  tool_path { name: "gcc" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin/cpp" }
   cxx_flag: "-std=c++0x"
   linker_flag: "-lstdc++"
-  linker_flag: "-B/usr/bin/"
+  linker_flag: "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/"
 
   # TODO(bazel-team): In theory, the path here ought to exactly match the path
   # used by gcc. That works because bazel currently doesn't track files at
@@ -68,18 +68,18 @@
   cxx_builtin_include_directory: "/usr/lib/gcc/"
   cxx_builtin_include_directory: "/usr/local/include"
   cxx_builtin_include_directory: "/usr/include"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+  tool_path { name: "gcov" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin/gcov" }
 
   # C(++) compiles invoke the compiler (as that is the one knowing where
   # to find libraries), but we provide LD so other rules can invoke the linker.
-  tool_path { name: "ld" path: "/usr/bin/ld" }
+  tool_path { name: "ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
 
-  tool_path { name: "nm" path: "/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  tool_path { name: "nm" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "/usr/bin/objdump" }
-  tool_path { name: "strip" path: "/usr/bin/strip" }
+  tool_path { name: "objdump" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
 
   # Anticipated future default.
   unfiltered_cxx_flag: "-no-canonical-prefixes"
@@ -166,10 +166,10 @@
   target_system_name: "local"
   toolchain_identifier: "local_darwin"
 
-  tool_path { name: "ar" path: "/usr/bin/libtool" }
-  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "/usr/bin/dwp" }
+  tool_path { name: "ar" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/libtool" }
+  tool_path { name: "compat-ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
   tool_path { name: "gcc" path: "osx_cc_wrapper.sh" }
   cxx_flag: "-std=c++0x"
   linker_flag: "-lstdc++"
@@ -179,14 +179,14 @@
   # TODO(ulfjack): This is wrong on so many levels. Figure out a way to auto-detect the proper
   # setting from the local compiler, and also how to make incremental builds correct.
   cxx_builtin_include_directory: "/"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
-  tool_path { name: "ld" path: "/usr/bin/ld" }
-  tool_path { name: "nm" path: "/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  tool_path { name: "gcov" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
+  tool_path { name: "ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "nm" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "/usr/bin/objdump" }
-  tool_path { name: "strip" path: "/usr/bin/strip" }
+  tool_path { name: "objdump" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
 
   # Anticipated future default.
   unfiltered_cxx_flag: "-no-canonical-prefixes"
@@ -264,14 +264,14 @@
   target_system_name: "local"
   toolchain_identifier: "local_freebsd"
 
-  tool_path { name: "ar" path: "/usr/bin/ar" }
-  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "/usr/bin/dwp" }
-  tool_path { name: "gcc" path: "/usr/bin/clang" }
+  tool_path { name: "ar" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ar" }
+  tool_path { name: "compat-ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
+  tool_path { name: "gcc" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/clang" }
   cxx_flag: "-std=c++0x"
   linker_flag: "-lstdc++"
-  linker_flag: "-B/usr/bin/"
+  linker_flag: "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/"
 
   # TODO(bazel-team): In theory, the path here ought to exactly match the path
   # used by gcc. That works because bazel currently doesn't track files at
@@ -280,18 +280,18 @@
   cxx_builtin_include_directory: "/usr/lib/clang"
   cxx_builtin_include_directory: "/usr/local/include"
   cxx_builtin_include_directory: "/usr/include"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+  tool_path { name: "gcov" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
 
   # C(++) compiles invoke the compiler (as that is the one knowing where
   # to find libraries), but we provide LD so other rules can invoke the linker.
-  tool_path { name: "ld" path: "/usr/bin/ld" }
+  tool_path { name: "ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
 
-  tool_path { name: "nm" path: "/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  tool_path { name: "nm" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "/usr/bin/objdump" }
-  tool_path { name: "strip" path: "/usr/bin/strip" }
+  tool_path { name: "objdump" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
 
   # Anticipated future default.
   unfiltered_cxx_flag: "-no-canonical-prefixes"
@@ -483,12 +483,12 @@
   target_system_name: "local"
   toolchain_identifier: "local_windows_msys64"
 
-  tool_path { name: "ar" path: "C:/tools/msys64/usr/bin/ar" }
-  tool_path { name: "compat-ld" path: "C:/tools/msys64/usr/bin/ld" }
-  tool_path { name: "cpp" path: "C:/tools/msys64/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "C:/tools/msys64/usr/bin/dwp" }
+  tool_path { name: "ar" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ar" }
+  tool_path { name: "compat-ld" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
   # Use gcc instead of g++ so that C will compile correctly.
-  tool_path { name: "gcc" path: "C:/tools/msys64/usr/bin/gcc" }
+  tool_path { name: "gcc" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcc" }
   cxx_flag: "-std=gnu++0x"
   linker_flag: "-lstdc++"
   # TODO(bazel-team): In theory, the path here ought to exactly match the path
@@ -497,14 +497,14 @@
   # to be fixed, maybe with auto-detection?
   cxx_builtin_include_directory: "C:/tools/msys64/"
   cxx_builtin_include_directory: "/usr/"
-  tool_path { name: "gcov" path: "C:/tools/msys64/usr/bin/gcov" }
-  tool_path { name: "ld" path: "C:/tools/msys64/usr/bin/ld" }
-  tool_path { name: "nm" path: "C:/tools/msys64/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "C:/tools/msys64/usr/bin/objcopy" }
+  tool_path { name: "gcov" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
+  tool_path { name: "ld" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "nm" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "C:/tools/msys64/usr/bin/objdump" }
-  tool_path { name: "strip" path: "C:/tools/msys64/usr/bin/strip" }
+  tool_path { name: "objdump" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
   linking_mode_flags { mode: DYNAMIC }
 }
 
diff -Nru bazel-0.19.2.orig/tools/cpp/unix_cc_configure.bzl bazel-0.19.2/tools/cpp/unix_cc_configure.bzl
--- bazel-0.19.2.orig/tools/cpp/unix_cc_configure.bzl	2018-11-19 16:19:34.000000000 +0000
+++ bazel-0.19.2/tools/cpp/unix_cc_configure.bzl	2018-11-22 20:28:48.104935601 +0000
@@ -79,27 +79,27 @@
         lines.append("  tool_path {name: \"%s\" path: \"%s\" }" % (k, escape_string(d[k])))
     return "\n".join(lines)
 
-def _find_tool(repository_ctx, tool, overriden_tools):
+def _find_tool(repository_ctx, tool, overriden_tools, prefix='/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/'):
     """Find a tool for repository, taking overriden tools into account."""
     if tool in overriden_tools:
         return overriden_tools[tool]
-    return which(repository_ctx, tool, "/usr/bin/" + tool)
+    return which(repository_ctx, tool, prefix + tool)
 
 def _get_tool_paths(repository_ctx, overriden_tools):
     """Compute the path to the various tools. Doesn't %-escape the result!"""
     return dict({
-        k: _find_tool(repository_ctx, k, overriden_tools)
-        for k in [
-            "ar",
-            "ld",
-            "cpp",
-            "gcc",
-            "dwp",
-            "gcov",
-            "nm",
-            "objcopy",
-            "objdump",
-            "strip",
+        k: _find_tool(repository_ctx, k, overriden_tools, p)
+        for k, p in [
+            ("ar", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("ld", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("cpp", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin"),
+            ("gcc", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/gcc-7.3.0/bin"),
+            ("dwp", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("gcov", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("nm", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("objcopy", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("objdump", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
+            ("strip", "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin"),
         ]
     }.items())
 
@@ -283,7 +283,7 @@
                 "-headerpad_max_install_names",
             ] if darwin else bin_search_flag + [
                 # Always have -B/usr/bin, see https://github.com/bazelbuild/bazel/issues/760.
-                "-B/usr/bin",
+                "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin",
                 # Gold linker only? Can we enable this by default?
                 # "-Wl,--warn-execstack",
                 # "-Wl,--detect-odr-violations"
