diff -Nru 0.17.2-dist.orig/tools/cpp/CROSSTOOL 0.17.2-dist/tools/cpp/CROSSTOOL
--- 0.17.2-dist.orig/tools/cpp/CROSSTOOL	1980-01-01 00:00:00.000000000 +0000
+++ 0.17.2-dist/tools/cpp/CROSSTOOL	2018-10-02 15:52:33.720074270 +0000
@@ -104,14 +104,14 @@
   target_system_name: "local"
   toolchain_identifier: "local_linux"
 
-  tool_path { name: "ar" path: "/usr/bin/ar" }
-  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "/usr/bin/dwp" }
-  tool_path { name: "gcc" path: "/usr/bin/gcc" }
+  tool_path { name: "ar" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ar" }
+  tool_path { name: "compat-ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
+  tool_path { name: "gcc" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcc" }
   cxx_flag: "-std=c++0x"
   linker_flag: "-lstdc++"
-  linker_flag: "-B/usr/bin/"
+  linker_flag: "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/"
 
   # TODO(bazel-team): In theory, the path here ought to exactly match the path
   # used by gcc. That works because bazel currently doesn't track files at
@@ -120,18 +120,19 @@
   cxx_builtin_include_directory: "/usr/lib/gcc/"
   cxx_builtin_include_directory: "/usr/local/include"
   cxx_builtin_include_directory: "/usr/include"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+  cxx_builtin_include_directory: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include"
+  tool_path { name: "gcov" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
 
   # C(++) compiles invoke the compiler (as that is the one knowing where
   # to find libraries), but we provide LD so other rules can invoke the linker.
-  tool_path { name: "ld" path: "/usr/bin/ld" }
+  tool_path { name: "ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
 
-  tool_path { name: "nm" path: "/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  tool_path { name: "nm" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "/usr/bin/objdump" }
-  tool_path { name: "strip" path: "/usr/bin/strip" }
+  tool_path { name: "objdump" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
 
   # Anticipated future default.
   unfiltered_cxx_flag: "-no-canonical-prefixes"
@@ -218,10 +219,10 @@
   target_system_name: "local"
   toolchain_identifier: "local_darwin"
 
-  tool_path { name: "ar" path: "/usr/bin/libtool" }
-  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "/usr/bin/dwp" }
+  tool_path { name: "ar" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/libtool" }
+  tool_path { name: "compat-ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
   tool_path { name: "gcc" path: "osx_cc_wrapper.sh" }
   cxx_flag: "-std=c++0x"
   linker_flag: "-lstdc++"
@@ -231,14 +232,14 @@
   # TODO(ulfjack): This is wrong on so many levels. Figure out a way to auto-detect the proper
   # setting from the local compiler, and also how to make incremental builds correct.
   cxx_builtin_include_directory: "/"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
-  tool_path { name: "ld" path: "/usr/bin/ld" }
-  tool_path { name: "nm" path: "/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  tool_path { name: "gcov" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
+  tool_path { name: "ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "nm" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "/usr/bin/objdump" }
-  tool_path { name: "strip" path: "/usr/bin/strip" }
+  tool_path { name: "objdump" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
 
   # Anticipated future default.
   unfiltered_cxx_flag: "-no-canonical-prefixes"
@@ -316,14 +317,14 @@
   target_system_name: "local"
   toolchain_identifier: "local_freebsd"
 
-  tool_path { name: "ar" path: "/usr/bin/ar" }
-  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "/usr/bin/dwp" }
-  tool_path { name: "gcc" path: "/usr/bin/clang" }
+  tool_path { name: "ar" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ar" }
+  tool_path { name: "compat-ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
+  tool_path { name: "gcc" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/clang" }
   cxx_flag: "-std=c++0x"
   linker_flag: "-lstdc++"
-  linker_flag: "-B/usr/bin/"
+  linker_flag: "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/"
 
   # TODO(bazel-team): In theory, the path here ought to exactly match the path
   # used by gcc. That works because bazel currently doesn't track files at
@@ -332,18 +333,19 @@
   cxx_builtin_include_directory: "/usr/lib/clang"
   cxx_builtin_include_directory: "/usr/local/include"
   cxx_builtin_include_directory: "/usr/include"
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+  cxx_builtin_include_directory: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/include"
+  tool_path { name: "gcov" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
 
   # C(++) compiles invoke the compiler (as that is the one knowing where
   # to find libraries), but we provide LD so other rules can invoke the linker.
-  tool_path { name: "ld" path: "/usr/bin/ld" }
+  tool_path { name: "ld" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
 
-  tool_path { name: "nm" path: "/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  tool_path { name: "nm" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "/usr/bin/objdump" }
-  tool_path { name: "strip" path: "/usr/bin/strip" }
+  tool_path { name: "objdump" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
 
   # Anticipated future default.
   unfiltered_cxx_flag: "-no-canonical-prefixes"
@@ -535,12 +537,12 @@
   target_system_name: "local"
   toolchain_identifier: "local_windows_msys64"
 
-  tool_path { name: "ar" path: "C:/tools/msys64/usr/bin/ar" }
-  tool_path { name: "compat-ld" path: "C:/tools/msys64/usr/bin/ld" }
-  tool_path { name: "cpp" path: "C:/tools/msys64/usr/bin/cpp" }
-  tool_path { name: "dwp" path: "C:/tools/msys64/usr/bin/dwp" }
+  tool_path { name: "ar" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ar" }
+  tool_path { name: "compat-ld" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "cpp" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/cpp" }
+  tool_path { name: "dwp" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/dwp" }
   # Use gcc instead of g++ so that C will compile correctly.
-  tool_path { name: "gcc" path: "C:/tools/msys64/usr/bin/gcc" }
+  tool_path { name: "gcc" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcc" }
   cxx_flag: "-std=gnu++0x"
   linker_flag: "-lstdc++"
   # TODO(bazel-team): In theory, the path here ought to exactly match the path
@@ -549,14 +551,14 @@
   # to be fixed, maybe with auto-detection?
   cxx_builtin_include_directory: "C:/tools/msys64/"
   cxx_builtin_include_directory: "/usr/"
-  tool_path { name: "gcov" path: "C:/tools/msys64/usr/bin/gcov" }
-  tool_path { name: "ld" path: "C:/tools/msys64/usr/bin/ld" }
-  tool_path { name: "nm" path: "C:/tools/msys64/usr/bin/nm" }
-  tool_path { name: "objcopy" path: "C:/tools/msys64/usr/bin/objcopy" }
+  tool_path { name: "gcov" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/gcov" }
+  tool_path { name: "ld" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/ld" }
+  tool_path { name: "nm" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/nm" }
+  tool_path { name: "objcopy" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objcopy" }
   objcopy_embed_flag: "-I"
   objcopy_embed_flag: "binary"
-  tool_path { name: "objdump" path: "C:/tools/msys64/usr/bin/objdump" }
-  tool_path { name: "strip" path: "C:/tools/msys64/usr/bin/strip" }
+  tool_path { name: "objdump" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/objdump" }
+  tool_path { name: "strip" path: "C:/tools/msys64/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin/strip" }
   linking_mode_flags { mode: DYNAMIC }
 }
 
diff -Nru 0.17.2-dist.orig/tools/cpp/unix_cc_configure.bzl 0.17.2-dist/tools/cpp/unix_cc_configure.bzl
--- 0.17.2-dist.orig/tools/cpp/unix_cc_configure.bzl	1980-01-01 00:00:00.000000000 +0000
+++ 0.17.2-dist/tools/cpp/unix_cc_configure.bzl	2018-10-02 15:45:51.036509092 +0000
@@ -283,7 +283,7 @@
                 "-headerpad_max_install_names",
             ] if darwin else bin_search_flag + [
                 # Always have -B/usr/bin, see https://github.com/bazelbuild/bazel/issues/760.
-                "-B/usr/bin",
+                "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin",
                 # Gold linker only? Can we enable this by default?
                 # "-Wl,--warn-execstack",
                 # "-Wl,--detect-odr-violations"
@@ -320,7 +320,7 @@
             _add_compiler_option_if_supported(repository_ctx, cc, "-Wself-assign")
         ) if darwin else bin_search_flag + [
             # Always have -B/usr/bin, see https://github.com/bazelbuild/bazel/issues/760.
-            "-B/usr/bin",
+            "-B/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09/bin",
         ]) + (
             # Disable problematic warnings.
             _add_compiler_option_if_supported(repository_ctx, cc, "-Wunused-but-set-parameter") +
