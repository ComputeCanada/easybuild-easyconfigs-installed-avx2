diff -ur libfabric-1.18.0.orig/include/ofi_hmem.h libfabric-1.18.0/include/ofi_hmem.h
--- libfabric-1.18.0.orig/include/ofi_hmem.h	2023-04-07 17:02:37.602841721 +0000
+++ libfabric-1.18.0/include/ofi_hmem.h	2023-09-01 13:39:48.894951120 +0000
@@ -51,7 +51,10 @@
 #if HAVE_CUDA
 
 #include <cuda.h>
-#include <cuda_runtime.h>
+#define cudaError_t CUresult
+#define cudaSuccess CUDA_SUCCESS
+#define cudaIpcMemHandle_t CUipcMemHandle
+enum cudaMemcpyKind { cudaMemcpyDefault = 0 };
 
 /* Libfabric supported CUDA operations. */
 cudaError_t ofi_cudaMemcpy(void* dst, const void* src, size_t count,
diff -ur libfabric-1.18.0.orig/src/hmem_cuda.c libfabric-1.18.0/src/hmem_cuda.c
--- libfabric-1.18.0.orig/src/hmem_cuda.c	2023-04-07 17:02:37.658841720 +0000
+++ libfabric-1.18.0/src/hmem_cuda.c	2023-09-01 13:39:40.472877938 +0000
@@ -41,16 +41,21 @@
 #if HAVE_CUDA
 
 #include <cuda.h>
-#include <cuda_runtime.h>
+#define cudaErrorNoDevice CUDA_ERROR_NO_DEVICE
+#define cudaErrorInvalidValue CUDA_ERROR_INVALID_VALUE
+#define cudaErrorAlreadyMapped CUDA_ERROR_ALREADY_MAPPED
+#define cudaHostRegisterDefault 0
+#define cudart_handle cuda_handle
+#define cudaIpcMemHandle_t CUipcMemHandle
+#define cudaIpcMemLazyEnablePeerAccess CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS
 
 struct cuda_ops {
-	cudaError_t (*cudaMemcpy)(void *dst, const void *src, size_t size,
-				  enum cudaMemcpyKind kind);
+	cudaError_t (*cudaMemcpy)(CUdeviceptr dst, CUdeviceptr src, size_t size);
 	cudaError_t (*cudaDeviceSynchronize)(void);
-	cudaError_t (*cudaFree)(void* ptr);
-	cudaError_t (*cudaMalloc)(void** ptr, size_t size);
-	const char *(*cudaGetErrorName)(cudaError_t error);
-	const char *(*cudaGetErrorString)(cudaError_t error);
+	cudaError_t (*cudaFree)(CUdeviceptr buf);
+	cudaError_t (*cudaMalloc)(CUdeviceptr *ptr, size_t size);
+	cudaError_t (*cudaGetErrorName)(cudaError_t error, const char **pstr);
+	cudaError_t (*cudaGetErrorString)(cudaError_t error, const char **pstr);
 	CUresult (*cuGetErrorName)(CUresult error, const char** pStr);
 	CUresult (*cuGetErrorString)(CUresult error, const char** pStr);
 	CUresult (*cuPointerGetAttribute)(void *data,
@@ -65,14 +70,9 @@
 					unsigned int flags);
 	cudaError_t (*cudaHostUnregister)(void *ptr);
 	cudaError_t (*cudaGetDeviceCount)(int *count);
-	cudaError_t (*cudaGetDevice)(int *device);
-	cudaError_t (*cudaSetDevice)(int device);
-	cudaError_t (*cudaIpcOpenMemHandle)(void **devptr,
-					    cudaIpcMemHandle_t handle,
-					    unsigned int flags);
-	cudaError_t (*cudaIpcGetMemHandle)(cudaIpcMemHandle_t *handle,
-					   void *devptr);
-	cudaError_t (*cudaIpcCloseMemHandle)(void *devptr);
+	cudaError_t (*cudaIpcOpenMemHandle)(CUdeviceptr *devptr, CUipcMemHandle handle, unsigned int flags);
+	cudaError_t (*cudaIpcGetMemHandle)(CUipcMemHandle *handle, CUdeviceptr devptr);
+	cudaError_t (*cudaIpcCloseMemHandle)(CUdeviceptr devptr);
 };
 
 static bool hmem_cuda_use_gdrcopy;
@@ -80,14 +80,12 @@
 static bool cuda_ipc_enabled;
 static int cuda_device_count;
 
-static cudaError_t cuda_disabled_cudaMemcpy(void *dst, const void *src,
-					    size_t size, enum cudaMemcpyKind kind);
+static cudaError_t cuda_disabled_cudaMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t size);
 
 #if ENABLE_CUDA_DLOPEN
 
 #include <dlfcn.h>
 
-static void *cudart_handle;
 static void *cuda_handle;
 static struct cuda_ops cuda_ops;
 
@@ -122,7 +120,7 @@
 {
 	cudaError_t cuda_ret;
 	CUcontext data;
-	cuda_ret = cuda_ops.cudaMemcpy(dst, src, size, kind);
+	cuda_ret = cuda_ops.cudaMemcpy((CUdeviceptr)dst, (CUdeviceptr)src, size);
 	if (cuda_ret != cudaSuccess)
 		return cuda_ret;
 
@@ -147,12 +145,16 @@
 
 const char *ofi_cudaGetErrorName(cudaError_t error)
 {
-	return cuda_ops.cudaGetErrorName(error);
+	const char *str;
+	cuda_ops.cudaGetErrorName(error, &str);
+	return str;
 }
 
 const char *ofi_cudaGetErrorString(cudaError_t error)
 {
-	return cuda_ops.cudaGetErrorString(error);
+	const char *str;
+	cuda_ops.cudaGetErrorString(error, &str);
+	return str;
 }
 
 CUresult ofi_cuGetErrorName(CUresult error, const char** pStr)
@@ -227,12 +229,12 @@
 
 cudaError_t ofi_cudaMalloc(void **ptr, size_t size)
 {
-	return cuda_ops.cudaMalloc(ptr, size);
+	return cuda_ops.cudaMalloc((CUdeviceptr *)ptr, size);
 }
 
 cudaError_t ofi_cudaFree(void *ptr)
 {
-	return cuda_ops.cudaFree(ptr);
+	return cuda_ops.cudaFree((CUdeviceptr)ptr);
 }
 
 int cuda_copy_to_dev(uint64_t device, void *dst, const void *src, size_t size)
@@ -299,7 +301,8 @@
 	cudaError_t cuda_ret;
 
 	cuda_ret = cuda_ops.cudaIpcGetMemHandle((cudaIpcMemHandle_t *)handle,
-						dev_buf);
+						(CUdeviceptr)dev_buf);
+
 	if (cuda_ret != cudaSuccess) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to perform cudaIpcGetMemHandle: %s:%s\n",
@@ -315,7 +318,7 @@
 {
 	cudaError_t cuda_ret;
 
-	cuda_ret = cuda_ops.cudaIpcOpenMemHandle(ipc_ptr,
+	cuda_ret = cuda_ops.cudaIpcOpenMemHandle((CUdeviceptr *)ipc_ptr,
 						 *(cudaIpcMemHandle_t *)handle,
 						 cudaIpcMemLazyEnablePeerAccess);
 
@@ -334,7 +337,7 @@
 {
 	cudaError_t cuda_ret;
 
-	cuda_ret = cuda_ops.cudaIpcCloseMemHandle(ipc_ptr);
+	cuda_ret = cuda_ops.cudaIpcCloseMemHandle((CUdeviceptr)ipc_ptr);
 
 	if (cuda_ret == cudaSuccess)
 		return FI_SUCCESS;
@@ -366,8 +369,7 @@
 	return -FI_EIO;
 }
 
-static cudaError_t cuda_disabled_cudaMemcpy(void *dst, const void *src,
-					    size_t size, enum cudaMemcpyKind kind)
+static cudaError_t cuda_disabled_cudaMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t size)
 {
 	FI_WARN(&core_prov, FI_LOG_CORE,
 		"cudaMemcpy was called but FI_HMEM_CUDA_ENABLE_XFER = 0, "
@@ -382,13 +384,6 @@
 	/* Assume failure to dlopen CUDA runtime is caused by the library not
 	 * being found. Thus, CUDA is not supported.
 	 */
-	cudart_handle = dlopen("libcudart.so", RTLD_NOW);
-	if (!cudart_handle) {
-		FI_INFO(&core_prov, FI_LOG_CORE,
-			"Failed to dlopen libcudart.so\n");
-		return -FI_ENOSYS;
-	}
-
 	cuda_handle = dlopen("libcuda.so", RTLD_NOW);
 	if (!cuda_handle) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
@@ -396,33 +391,33 @@
 		goto err_dlclose_cudart;
 	}
 
-	cuda_ops.cudaMemcpy = dlsym(cudart_handle, STRINGIFY(cudaMemcpy));
+	cuda_ops.cudaMemcpy = dlsym(cudart_handle, STRINGIFY(cuMemcpy));
 	if (!cuda_ops.cudaMemcpy) {
 		FI_WARN(&core_prov, FI_LOG_CORE, "Failed to find cudaMemcpy\n");
 		goto err_dlclose_cuda;
 	}
 
 	cuda_ops.cudaDeviceSynchronize = dlsym(cudart_handle,
-					       STRINGIFY(cudaDeviceSynchronize));
+					       STRINGIFY(cuCtxSynchronize));
 	if (!cuda_ops.cudaMemcpy) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaDeviceSynchronize\n");
 		goto err_dlclose_cuda;
 	}
 
-	cuda_ops.cudaFree = dlsym(cudart_handle, STRINGIFY(cudaFree));
+	cuda_ops.cudaFree = dlsym(cudart_handle, STRINGIFY(cuMemFree_v2));
 	if (!cuda_ops.cudaFree) {
 		FI_WARN(&core_prov, FI_LOG_CORE, "Failed to find cudaFree\n");
 		goto err_dlclose_cuda;
 	}
 
-	cuda_ops.cudaMalloc = dlsym(cudart_handle, STRINGIFY(cudaMalloc));
+	cuda_ops.cudaMalloc = dlsym(cudart_handle, STRINGIFY(cuMemAlloc_v2));
 	if (!cuda_ops.cudaMalloc) {
 		FI_WARN(&core_prov, FI_LOG_CORE, "Failed to find cudaMalloc\n");
 		goto err_dlclose_cuda;
 	}
 
-	cuda_ops.cudaGetErrorName = dlsym(cudart_handle, STRINGIFY(cudaGetErrorName));
+	cuda_ops.cudaGetErrorName = dlsym(cudart_handle, STRINGIFY(cuGetErrorName));
 	if (!cuda_ops.cudaGetErrorName) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaGetErrorName\n");
@@ -430,7 +425,7 @@
 	}
 
 	cuda_ops.cudaGetErrorString = dlsym(cudart_handle,
-					    STRINGIFY(cudaGetErrorString));
+					    STRINGIFY(cuGetErrorString));
 	if (!cuda_ops.cudaGetErrorString) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaGetErrorString\n");
@@ -477,7 +472,7 @@
 		goto err_dlclose_cuda;
 	}
 
-	cuda_ops.cudaHostRegister = dlsym(cudart_handle, STRINGIFY(cudaHostRegister));
+	cuda_ops.cudaHostRegister = dlsym(cudart_handle, STRINGIFY(cuMemHostRegister));
 	if (!cuda_ops.cudaHostRegister) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaHostRegister\n");
@@ -485,7 +480,7 @@
 	}
 
 	cuda_ops.cudaHostUnregister = dlsym(cudart_handle,
-					    STRINGIFY(cudaHostUnregister));
+					    STRINGIFY(cuMemHostUnregister));
 	if (!cuda_ops.cudaHostUnregister) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaHostUnregister\n");
@@ -493,31 +488,15 @@
 	}
 
 	cuda_ops.cudaGetDeviceCount = dlsym(cudart_handle,
-					    STRINGIFY(cudaGetDeviceCount));
+					    STRINGIFY(cuDeviceGetCount));
 	if (!cuda_ops.cudaGetDeviceCount) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaGetDeviceCount\n");
 		goto err_dlclose_cuda;
 	}
 
-	cuda_ops.cudaGetDevice = dlsym(cudart_handle,
-					    STRINGIFY(cudaGetDevice));
-	if (!cuda_ops.cudaGetDevice) {
-		FI_WARN(&core_prov, FI_LOG_CORE,
-			"Failed to find cudaGetDevice\n");
-		goto err_dlclose_cuda;
-	}
-
-	cuda_ops.cudaSetDevice = dlsym(cudart_handle,
-					    STRINGIFY(cudaSetDevice));
-	if (!cuda_ops.cudaSetDevice) {
-		FI_WARN(&core_prov, FI_LOG_CORE,
-			"Failed to find cudaSetDevice\n");
-		goto err_dlclose_cuda;
-	}
-
 	cuda_ops.cudaIpcOpenMemHandle = dlsym(cudart_handle,
-					    STRINGIFY(cudaIpcOpenMemHandle));
+					    STRINGIFY(cuIpcOpenMemHandle));
 	if (!cuda_ops.cudaIpcOpenMemHandle) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaIpcOpenMemHandle\n");
@@ -525,7 +504,7 @@
 	}
 
 	cuda_ops.cudaIpcGetMemHandle = dlsym(cudart_handle,
-					    STRINGIFY(cudaIpcGetMemHandle));
+					    STRINGIFY(cuIpcGetMemHandle));
 	if (!cuda_ops.cudaIpcGetMemHandle) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaIpcGetMemHandle\n");
@@ -533,7 +512,7 @@
 	}
 
 	cuda_ops.cudaIpcCloseMemHandle = dlsym(cudart_handle,
-					    STRINGIFY(cudaIpcCloseMemHandle));
+					    STRINGIFY(cuIpcCloseMemHandle));
 	if (!cuda_ops.cudaIpcCloseMemHandle) {
 		FI_WARN(&core_prov, FI_LOG_CORE,
 			"Failed to find cudaIpcCloseMemHandle\n");
@@ -545,7 +524,6 @@
 err_dlclose_cuda:
 	dlclose(cuda_handle);
 err_dlclose_cudart:
-	dlclose(cudart_handle);
 
 	return -FI_ENODATA;
 #else
@@ -557,7 +535,6 @@
 {
 #if ENABLE_CUDA_DLOPEN
 	dlclose(cuda_handle);
-	dlclose(cudart_handle);
 #endif
 }
 
