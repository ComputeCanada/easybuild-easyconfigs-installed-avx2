From 9d02c6009994d1e9ad3b21299ce6c3fb158f261c Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Wed, 28 Jul 2021 16:16:22 -0400
Subject: [PATCH 1/9] add hierarchical modulepath support

if MII_ENABLE_SPIDER is set to yes at build time, mii
will use the spider command provided by Lmod to find
every modulefile in the modulepath hierarchy. This
method is not very compatible with syncing, because
the spider command scans every modulefile and then
outputs everything in JSON format.

MII_ENABLE_LUA can also be used in conjunction with
MII_ENABLE_SPIDER, but will only have an effect when
doing a sync, because the spider command will be used
when doing a build.
---
 init/common         |    8 +-
 makefile            |    7 +
 src/analysis.c      |  102 ++
 src/analysis.h      |    9 +
 src/cjson/cJSON.c   | 3110 +++++++++++++++++++++++++++++++++++++++++++
 src/cjson/cJSON.h   |  293 ++++
 src/main.c          |   22 +-
 src/mii.c           |   14 +-
 src/modtable.c      |  177 ++-
 src/modtable.h      |   11 +-
 src/search_result.c |  211 ++-
 src/search_result.h |   13 +-
 12 files changed, 3924 insertions(+), 53 deletions(-)
 create mode 100644 src/cjson/cJSON.c
 create mode 100644 src/cjson/cJSON.h

diff --git a/init/common b/init/common
index 91645c9..dc2b554 100755
--- a/init/common
+++ b/init/common
@@ -9,12 +9,14 @@ if [ "$state" = "disabled" ]; then
 fi
 
 # run mii select on the command, see if it returns OK
-mod="$($MII select "$1")"
+mods=($($MII select "$1"))
 res=$?
 
 if [ $res = 0 ]; then
-    echo "[mii] loading $mod ..." 1>&2
-    module load $mod
+    echo "[mii] loading $mods ..." 1>&2
+    for mod in $mods; do
+        module load $mod
+    done
     $@
 elif [ $res = 2 ]; then
     echo "$1: command not found!" 1>&2
diff --git a/makefile b/makefile
index 6890a80..e3e933e 100644
--- a/makefile
+++ b/makefile
@@ -17,12 +17,19 @@ MII_ENABLE_LUA  ?= no
 MII_LUA_LDFLAG  ?= -llua
 MII_LUA_INCLUDE ?=
 
+MII_ENABLE_SPIDER ?= no
+
 ifeq ($(MII_ENABLE_LUA), yes)
 CFLAGS  += -DMII_ENABLE_LUA $(MII_LUA_INCLUDE)
 LDFLAGS += $(MII_LUA_LDFLAG)
 OUTPUTS += $(LUA_OUTPUT)
 endif
 
+ifeq ($(MII_ENABLE_SPIDER), yes)
+CFLAGS 	  += -DMII_ENABLE_SPIDER
+C_SOURCES += src/cjson/cJSON.c
+endif
+
 all: $(OUTPUTS)
 
 $(C_OUTPUT): $(C_OBJECTS)
diff --git a/src/analysis.c b/src/analysis.c
index fd67140..1b16312 100644
--- a/src/analysis.c
+++ b/src/analysis.c
@@ -24,6 +24,10 @@
 
 #endif // MII_ENABLE_LUA
 
+#if MII_ENABLE_SPIDER
+#include "cjson/cJSON.h"
+#endif
+
 #include <dirent.h>
 #include <errno.h>
 #include <regex.h>
@@ -55,6 +59,10 @@ int _mii_analysis_tcl(const char* path, char*** bins_out, int* num_bins_out);
 /* path scanning functions */
 int _mii_analysis_scan_path(char* path, char*** bins_out, int* num_bins_out);
 
+#if MII_ENABLE_SPIDER
+int _mii_analysis_parents_from_json(const cJSON* json, char*** parents_out, int* num_parents_out);
+#endif
+
 #if !MII_ENABLE_LUA
 /*
  * compile regexes
@@ -342,3 +350,97 @@ char* _mii_analysis_expand(const char* expr) {
     wordfree(&w);
     return output;
 }
+
+#if MII_ENABLE_SPIDER
+
+/* parse the json and fill module info */
+int mii_analysis_parse_module_json(const cJSON* mod_json, mii_modtable_entry* mod) {
+    /* stat the type */
+    struct stat st;
+    if (stat(mod_json->string, &st) != 0) {
+        mii_error("Couldn't stat %s: %s", mod_json->string, strerror(errno));
+        return -1;
+    }
+
+    /* get the code */
+    cJSON* code = cJSON_GetObjectItemCaseSensitive(mod_json, "fullName");
+    if (code == NULL) {
+        mii_error("Couldn't find the code in the JSON!");
+        return -1;
+    }
+
+    /* get the parents */
+    cJSON* parents_arrs = cJSON_GetObjectItemCaseSensitive(mod_json, "parentAA");
+    if(_mii_analysis_parents_from_json(parents_arrs, &mod->parents, &mod->num_parents)) {
+        mii_error("Couldn't get parents from JSON!");
+        return -1;
+    }
+
+    /* fill up some of the info */
+    mod->bins = NULL;
+    mod->num_bins = 0;
+    mod->path = mii_strdup(mod_json->string);
+    mod->type = MII_MODTABLE_MODTYPE_LMOD;
+    mod->timestamp = st.st_mtime;
+    mod->code = mii_strdup(code->valuestring);
+    mod->analysis_complete = 1;
+
+    /* get the bins */
+    cJSON* bin_paths = cJSON_GetObjectItemCaseSensitive(mod_json, "pathA");
+    if (bin_paths != NULL) {
+        for (cJSON* path = bin_paths->child; path != NULL; path = path->next) {
+            /* analyze the bin paths */
+            _mii_analysis_scan_path(path->string, &mod->bins, &mod->num_bins);
+        }
+    }
+
+    return 0;
+}
+
+/* get the parents from a json array (can be NULL) */
+int _mii_analysis_parents_from_json(const cJSON* json, char*** parents_out, int* num_parents_out) {
+    /* if NULL, nothing to do */
+    if (json == NULL) {
+        *parents_out = NULL;
+        *num_parents_out = 0;
+        return 0;
+    }
+
+    /* allocate memory for the parents */
+    *num_parents_out = cJSON_GetArraySize(json);
+    *parents_out = malloc(*num_parents_out * sizeof(char*));
+
+    if (*parents_out == NULL) {
+        mii_error("Couldn't allocate memory for parents: %s", strerror(errno));
+        return -1;
+    }
+
+    size_t i = 0;
+    for (cJSON* parents = json->child; parents != NULL; parents = parents->next) {
+        char* codes_tmp = NULL;
+        size_t parent_len, codes_size = 0;
+
+        for (cJSON* parent = parents->child; parent != NULL; parent = parent->next) {
+            /* allocate memory new code */
+            parent_len = strlen(parent->valuestring);
+            codes_tmp = (char*) realloc(codes_tmp, codes_size + parent_len + 1);
+
+            if (codes_tmp == NULL) {
+                mii_error("Couldn't allocate memory for parents: %s", strerror(errno));
+                free(*parents_out);
+                return -1;
+            }
+
+            /* add new code */
+            if (codes_size != 0) strcpy(codes_tmp + codes_size - 1, " ");
+            strcpy(codes_tmp + codes_size, parent->valuestring);
+
+            codes_size += parent_len + 1;
+        }
+        (*parents_out)[i++] = codes_tmp;
+    }
+
+    return 0;
+}
+
+#endif
diff --git a/src/analysis.h b/src/analysis.h
index 7b591a9..fbb2ccd 100644
--- a/src/analysis.h
+++ b/src/analysis.h
@@ -1,6 +1,11 @@
 #ifndef MII_ANALYSIS_H
 #define MII_ANALYSIS_H
 
+#if MII_ENABLE_SPIDER
+#include "cjson/cJSON.h"
+#include "modtable.h"
+#endif
+
 #define MII_ANALYSIS_LINEBUF_SIZE 512
 
 /*
@@ -14,4 +19,8 @@ void mii_analysis_free();
 
 int mii_analysis_run(const char* modfile, int modtype, char*** bins_out, int* num_bins_out);
 
+#if MII_ENABLE_SPIDER
+int mii_analysis_parse_module_json(const cJSON* mod_json, mii_modtable_entry* mod);
+#endif
+
 #endif
diff --git a/src/cjson/cJSON.c b/src/cjson/cJSON.c
new file mode 100644
index 0000000..030311c
--- /dev/null
+++ b/src/cjson/cJSON.c
@@ -0,0 +1,3110 @@
+/*
+  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy
+  of this software and associated documentation files (the "Software"), to deal
+  in the Software without restriction, including without limitation the rights
+  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+  copies of the Software, and to permit persons to whom the Software is
+  furnished to do so, subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in
+  all copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+  THE SOFTWARE.
+*/
+
+/* cJSON */
+/* JSON parser in C. */
+
+/* disable warnings about old C89 functions in MSVC */
+#if !defined(_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
+#define _CRT_SECURE_NO_DEPRECATE
+#endif
+
+#ifdef __GNUC__
+#pragma GCC visibility push(default)
+#endif
+#if defined(_MSC_VER)
+#pragma warning (push)
+/* disable warning about single line comments in system headers */
+#pragma warning (disable : 4001)
+#endif
+
+#include <string.h>
+#include <stdio.h>
+#include <math.h>
+#include <stdlib.h>
+#include <limits.h>
+#include <ctype.h>
+#include <float.h>
+
+#ifdef ENABLE_LOCALES
+#include <locale.h>
+#endif
+
+#if defined(_MSC_VER)
+#pragma warning (pop)
+#endif
+#ifdef __GNUC__
+#pragma GCC visibility pop
+#endif
+
+#include "cJSON.h"
+
+/* define our own boolean type */
+#ifdef true
+#undef true
+#endif
+#define true ((cJSON_bool)1)
+
+#ifdef false
+#undef false
+#endif
+#define false ((cJSON_bool)0)
+
+/* define isnan and isinf for ANSI C, if in C99 or above, isnan and isinf has been defined in math.h */
+#ifndef isinf
+#define isinf(d) (isnan((d - d)) && !isnan(d))
+#endif
+#ifndef isnan
+#define isnan(d) (d != d)
+#endif
+
+#ifndef NAN
+#ifdef _WIN32
+#define NAN sqrt(-1.0)
+#else
+#define NAN 0.0/0.0
+#endif
+#endif
+
+typedef struct {
+    const unsigned char *json;
+    size_t position;
+} error;
+static error global_error = { NULL, 0 };
+
+CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
+{
+    return (const char*) (global_error.json + global_error.position);
+}
+
+CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item) 
+{
+    if (!cJSON_IsString(item)) 
+    {
+        return NULL;
+    }
+
+    return item->valuestring;
+}
+
+CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item) 
+{
+    if (!cJSON_IsNumber(item)) 
+    {
+        return (double) NAN;
+    }
+
+    return item->valuedouble;
+}
+
+/* This is a safeguard to prevent copy-pasters from using incompatible C and header files */
+#if (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || (CJSON_VERSION_PATCH != 14)
+    #error cJSON.h and cJSON.c have different versions. Make sure that both have the same.
+#endif
+
+CJSON_PUBLIC(const char*) cJSON_Version(void)
+{
+    static char version[15];
+    sprintf(version, "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
+
+    return version;
+}
+
+/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
+static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
+{
+    if ((string1 == NULL) || (string2 == NULL))
+    {
+        return 1;
+    }
+
+    if (string1 == string2)
+    {
+        return 0;
+    }
+
+    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
+    {
+        if (*string1 == '\0')
+        {
+            return 0;
+        }
+    }
+
+    return tolower(*string1) - tolower(*string2);
+}
+
+typedef struct internal_hooks
+{
+    void *(CJSON_CDECL *allocate)(size_t size);
+    void (CJSON_CDECL *deallocate)(void *pointer);
+    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);
+} internal_hooks;
+
+#if defined(_MSC_VER)
+/* work around MSVC error C2322: '...' address of dllimport '...' is not static */
+static void * CJSON_CDECL internal_malloc(size_t size)
+{
+    return malloc(size);
+}
+static void CJSON_CDECL internal_free(void *pointer)
+{
+    free(pointer);
+}
+static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)
+{
+    return realloc(pointer, size);
+}
+#else
+#define internal_malloc malloc
+#define internal_free free
+#define internal_realloc realloc
+#endif
+
+/* strlen of character literals resolved at compile time */
+#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))
+
+static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };
+
+static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
+{
+    size_t length = 0;
+    unsigned char *copy = NULL;
+
+    if (string == NULL)
+    {
+        return NULL;
+    }
+
+    length = strlen((const char*)string) + sizeof("");
+    copy = (unsigned char*)hooks->allocate(length);
+    if (copy == NULL)
+    {
+        return NULL;
+    }
+    memcpy(copy, string, length);
+
+    return copy;
+}
+
+CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
+{
+    if (hooks == NULL)
+    {
+        /* Reset hooks */
+        global_hooks.allocate = malloc;
+        global_hooks.deallocate = free;
+        global_hooks.reallocate = realloc;
+        return;
+    }
+
+    global_hooks.allocate = malloc;
+    if (hooks->malloc_fn != NULL)
+    {
+        global_hooks.allocate = hooks->malloc_fn;
+    }
+
+    global_hooks.deallocate = free;
+    if (hooks->free_fn != NULL)
+    {
+        global_hooks.deallocate = hooks->free_fn;
+    }
+
+    /* use realloc only if both free and malloc are used */
+    global_hooks.reallocate = NULL;
+    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
+    {
+        global_hooks.reallocate = realloc;
+    }
+}
+
+/* Internal constructor. */
+static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
+{
+    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
+    if (node)
+    {
+        memset(node, '\0', sizeof(cJSON));
+    }
+
+    return node;
+}
+
+/* Delete a cJSON structure. */
+CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
+{
+    cJSON *next = NULL;
+    while (item != NULL)
+    {
+        next = item->next;
+        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
+        {
+            cJSON_Delete(item->child);
+        }
+        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
+        {
+            global_hooks.deallocate(item->valuestring);
+        }
+        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
+        {
+            global_hooks.deallocate(item->string);
+        }
+        global_hooks.deallocate(item);
+        item = next;
+    }
+}
+
+/* get the decimal point character of the current locale */
+static unsigned char get_decimal_point(void)
+{
+#ifdef ENABLE_LOCALES
+    struct lconv *lconv = localeconv();
+    return (unsigned char) lconv->decimal_point[0];
+#else
+    return '.';
+#endif
+}
+
+typedef struct
+{
+    const unsigned char *content;
+    size_t length;
+    size_t offset;
+    size_t depth; /* How deeply nested (in arrays/objects) is the input at the current offset. */
+    internal_hooks hooks;
+} parse_buffer;
+
+/* check if the given size is left to read in a given parse buffer (starting with 1) */
+#define can_read(buffer, size) ((buffer != NULL) && (((buffer)->offset + size) <= (buffer)->length))
+/* check if the buffer can be accessed at the given index (starting with 0) */
+#define can_access_at_index(buffer, index) ((buffer != NULL) && (((buffer)->offset + index) < (buffer)->length))
+#define cannot_access_at_index(buffer, index) (!can_access_at_index(buffer, index))
+/* get a pointer to the buffer at the position */
+#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)
+
+/* Parse the input text to generate a number, and populate the result into item. */
+static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
+{
+    double number = 0;
+    unsigned char *after_end = NULL;
+    unsigned char number_c_string[64];
+    unsigned char decimal_point = get_decimal_point();
+    size_t i = 0;
+
+    if ((input_buffer == NULL) || (input_buffer->content == NULL))
+    {
+        return false;
+    }
+
+    /* copy the number into a temporary buffer and replace '.' with the decimal point
+     * of the current locale (for strtod)
+     * This also takes care of '\0' not necessarily being available for marking the end of the input */
+    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
+    {
+        switch (buffer_at_offset(input_buffer)[i])
+        {
+            case '0':
+            case '1':
+            case '2':
+            case '3':
+            case '4':
+            case '5':
+            case '6':
+            case '7':
+            case '8':
+            case '9':
+            case '+':
+            case '-':
+            case 'e':
+            case 'E':
+                number_c_string[i] = buffer_at_offset(input_buffer)[i];
+                break;
+
+            case '.':
+                number_c_string[i] = decimal_point;
+                break;
+
+            default:
+                goto loop_end;
+        }
+    }
+loop_end:
+    number_c_string[i] = '\0';
+
+    number = strtod((const char*)number_c_string, (char**)&after_end);
+    if (number_c_string == after_end)
+    {
+        return false; /* parse_error */
+    }
+
+    item->valuedouble = number;
+
+    /* use saturation in case of overflow */
+    if (number >= INT_MAX)
+    {
+        item->valueint = INT_MAX;
+    }
+    else if (number <= (double)INT_MIN)
+    {
+        item->valueint = INT_MIN;
+    }
+    else
+    {
+        item->valueint = (int)number;
+    }
+
+    item->type = cJSON_Number;
+
+    input_buffer->offset += (size_t)(after_end - number_c_string);
+    return true;
+}
+
+/* don't ask me, but the original cJSON_SetNumberValue returns an integer or double */
+CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)
+{
+    if (number >= INT_MAX)
+    {
+        object->valueint = INT_MAX;
+    }
+    else if (number <= (double)INT_MIN)
+    {
+        object->valueint = INT_MIN;
+    }
+    else
+    {
+        object->valueint = (int)number;
+    }
+
+    return object->valuedouble = number;
+}
+
+CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)
+{
+    char *copy = NULL;
+    /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */
+    if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))
+    {
+        return NULL;
+    }
+    if (strlen(valuestring) <= strlen(object->valuestring))
+    {
+        strcpy(object->valuestring, valuestring);
+        return object->valuestring;
+    }
+    copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);
+    if (copy == NULL)
+    {
+        return NULL;
+    }
+    if (object->valuestring != NULL)
+    {
+        cJSON_free(object->valuestring);
+    }
+    object->valuestring = copy;
+
+    return copy;
+}
+
+typedef struct
+{
+    unsigned char *buffer;
+    size_t length;
+    size_t offset;
+    size_t depth; /* current nesting depth (for formatted printing) */
+    cJSON_bool noalloc;
+    cJSON_bool format; /* is this print a formatted print */
+    internal_hooks hooks;
+} printbuffer;
+
+/* realloc printbuffer if necessary to have at least "needed" bytes more */
+static unsigned char* ensure(printbuffer * const p, size_t needed)
+{
+    unsigned char *newbuffer = NULL;
+    size_t newsize = 0;
+
+    if ((p == NULL) || (p->buffer == NULL))
+    {
+        return NULL;
+    }
+
+    if ((p->length > 0) && (p->offset >= p->length))
+    {
+        /* make sure that offset is valid */
+        return NULL;
+    }
+
+    if (needed > INT_MAX)
+    {
+        /* sizes bigger than INT_MAX are currently not supported */
+        return NULL;
+    }
+
+    needed += p->offset + 1;
+    if (needed <= p->length)
+    {
+        return p->buffer + p->offset;
+    }
+
+    if (p->noalloc) {
+        return NULL;
+    }
+
+    /* calculate new buffer size */
+    if (needed > (INT_MAX / 2))
+    {
+        /* overflow of int, use INT_MAX if possible */
+        if (needed <= INT_MAX)
+        {
+            newsize = INT_MAX;
+        }
+        else
+        {
+            return NULL;
+        }
+    }
+    else
+    {
+        newsize = needed * 2;
+    }
+
+    if (p->hooks.reallocate != NULL)
+    {
+        /* reallocate with realloc if available */
+        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
+        if (newbuffer == NULL)
+        {
+            p->hooks.deallocate(p->buffer);
+            p->length = 0;
+            p->buffer = NULL;
+
+            return NULL;
+        }
+    }
+    else
+    {
+        /* otherwise reallocate manually */
+        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
+        if (!newbuffer)
+        {
+            p->hooks.deallocate(p->buffer);
+            p->length = 0;
+            p->buffer = NULL;
+
+            return NULL;
+        }
+        
+        memcpy(newbuffer, p->buffer, p->offset + 1);
+        p->hooks.deallocate(p->buffer);
+    }
+    p->length = newsize;
+    p->buffer = newbuffer;
+
+    return newbuffer + p->offset;
+}
+
+/* calculate the new length of the string in a printbuffer and update the offset */
+static void update_offset(printbuffer * const buffer)
+{
+    const unsigned char *buffer_pointer = NULL;
+    if ((buffer == NULL) || (buffer->buffer == NULL))
+    {
+        return;
+    }
+    buffer_pointer = buffer->buffer + buffer->offset;
+
+    buffer->offset += strlen((const char*)buffer_pointer);
+}
+
+/* securely comparison of floating-point variables */
+static cJSON_bool compare_double(double a, double b)
+{
+    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
+    return (fabs(a - b) <= maxVal * DBL_EPSILON);
+}
+
+/* Render the number nicely from the given item into a string. */
+static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
+{
+    unsigned char *output_pointer = NULL;
+    double d = item->valuedouble;
+    int length = 0;
+    size_t i = 0;
+    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
+    unsigned char decimal_point = get_decimal_point();
+    double test = 0.0;
+
+    if (output_buffer == NULL)
+    {
+        return false;
+    }
+
+    /* This checks for NaN and Infinity */
+    if (isnan(d) || isinf(d))
+    {
+        length = sprintf((char*)number_buffer, "null");
+    }
+    else
+    {
+        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
+        length = sprintf((char*)number_buffer, "%1.15g", d);
+
+        /* Check whether the original double can be recovered */
+        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
+        {
+            /* If not, print with 17 decimal places of precision */
+            length = sprintf((char*)number_buffer, "%1.17g", d);
+        }
+    }
+
+    /* sprintf failed or buffer overrun occurred */
+    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
+    {
+        return false;
+    }
+
+    /* reserve appropriate space in the output */
+    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
+    if (output_pointer == NULL)
+    {
+        return false;
+    }
+
+    /* copy the printed number to the output and replace locale
+     * dependent decimal point with '.' */
+    for (i = 0; i < ((size_t)length); i++)
+    {
+        if (number_buffer[i] == decimal_point)
+        {
+            output_pointer[i] = '.';
+            continue;
+        }
+
+        output_pointer[i] = number_buffer[i];
+    }
+    output_pointer[i] = '\0';
+
+    output_buffer->offset += (size_t)length;
+
+    return true;
+}
+
+/* parse 4 digit hexadecimal number */
+static unsigned parse_hex4(const unsigned char * const input)
+{
+    unsigned int h = 0;
+    size_t i = 0;
+
+    for (i = 0; i < 4; i++)
+    {
+        /* parse digit */
+        if ((input[i] >= '0') && (input[i] <= '9'))
+        {
+            h += (unsigned int) input[i] - '0';
+        }
+        else if ((input[i] >= 'A') && (input[i] <= 'F'))
+        {
+            h += (unsigned int) 10 + input[i] - 'A';
+        }
+        else if ((input[i] >= 'a') && (input[i] <= 'f'))
+        {
+            h += (unsigned int) 10 + input[i] - 'a';
+        }
+        else /* invalid */
+        {
+            return 0;
+        }
+
+        if (i < 3)
+        {
+            /* shift left to make place for the next nibble */
+            h = h << 4;
+        }
+    }
+
+    return h;
+}
+
+/* converts a UTF-16 literal to UTF-8
+ * A literal can be one or two sequences of the form \uXXXX */
+static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
+{
+    long unsigned int codepoint = 0;
+    unsigned int first_code = 0;
+    const unsigned char *first_sequence = input_pointer;
+    unsigned char utf8_length = 0;
+    unsigned char utf8_position = 0;
+    unsigned char sequence_length = 0;
+    unsigned char first_byte_mark = 0;
+
+    if ((input_end - first_sequence) < 6)
+    {
+        /* input ends unexpectedly */
+        goto fail;
+    }
+
+    /* get the first utf16 sequence */
+    first_code = parse_hex4(first_sequence + 2);
+
+    /* check that the code is valid */
+    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
+    {
+        goto fail;
+    }
+
+    /* UTF16 surrogate pair */
+    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
+    {
+        const unsigned char *second_sequence = first_sequence + 6;
+        unsigned int second_code = 0;
+        sequence_length = 12; /* \uXXXX\uXXXX */
+
+        if ((input_end - second_sequence) < 6)
+        {
+            /* input ends unexpectedly */
+            goto fail;
+        }
+
+        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
+        {
+            /* missing second half of the surrogate pair */
+            goto fail;
+        }
+
+        /* get the second utf16 sequence */
+        second_code = parse_hex4(second_sequence + 2);
+        /* check that the code is valid */
+        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
+        {
+            /* invalid second half of the surrogate pair */
+            goto fail;
+        }
+
+
+        /* calculate the unicode codepoint from the surrogate pair */
+        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
+    }
+    else
+    {
+        sequence_length = 6; /* \uXXXX */
+        codepoint = first_code;
+    }
+
+    /* encode as UTF-8
+     * takes at maximum 4 bytes to encode:
+     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
+    if (codepoint < 0x80)
+    {
+        /* normal ascii, encoding 0xxxxxxx */
+        utf8_length = 1;
+    }
+    else if (codepoint < 0x800)
+    {
+        /* two bytes, encoding 110xxxxx 10xxxxxx */
+        utf8_length = 2;
+        first_byte_mark = 0xC0; /* 11000000 */
+    }
+    else if (codepoint < 0x10000)
+    {
+        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
+        utf8_length = 3;
+        first_byte_mark = 0xE0; /* 11100000 */
+    }
+    else if (codepoint <= 0x10FFFF)
+    {
+        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
+        utf8_length = 4;
+        first_byte_mark = 0xF0; /* 11110000 */
+    }
+    else
+    {
+        /* invalid unicode codepoint */
+        goto fail;
+    }
+
+    /* encode as utf8 */
+    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
+    {
+        /* 10xxxxxx */
+        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
+        codepoint >>= 6;
+    }
+    /* encode first byte */
+    if (utf8_length > 1)
+    {
+        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
+    }
+    else
+    {
+        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
+    }
+
+    *output_pointer += utf8_length;
+
+    return sequence_length;
+
+fail:
+    return 0;
+}
+
+/* Parse the input text into an unescaped cinput, and populate item. */
+static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
+{
+    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
+    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
+    unsigned char *output_pointer = NULL;
+    unsigned char *output = NULL;
+
+    /* not a string */
+    if (buffer_at_offset(input_buffer)[0] != '\"')
+    {
+        goto fail;
+    }
+
+    {
+        /* calculate approximate size of the output (overestimate) */
+        size_t allocation_length = 0;
+        size_t skipped_bytes = 0;
+        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
+        {
+            /* is escape sequence */
+            if (input_end[0] == '\\')
+            {
+                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
+                {
+                    /* prevent buffer overflow when last input character is a backslash */
+                    goto fail;
+                }
+                skipped_bytes++;
+                input_end++;
+            }
+            input_end++;
+        }
+        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
+        {
+            goto fail; /* string ended unexpectedly */
+        }
+
+        /* This is at most how much we need for the output */
+        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
+        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
+        if (output == NULL)
+        {
+            goto fail; /* allocation failure */
+        }
+    }
+
+    output_pointer = output;
+    /* loop through the string literal */
+    while (input_pointer < input_end)
+    {
+        if (*input_pointer != '\\')
+        {
+            *output_pointer++ = *input_pointer++;
+        }
+        /* escape sequence */
+        else
+        {
+            unsigned char sequence_length = 2;
+            if ((input_end - input_pointer) < 1)
+            {
+                goto fail;
+            }
+
+            switch (input_pointer[1])
+            {
+                case 'b':
+                    *output_pointer++ = '\b';
+                    break;
+                case 'f':
+                    *output_pointer++ = '\f';
+                    break;
+                case 'n':
+                    *output_pointer++ = '\n';
+                    break;
+                case 'r':
+                    *output_pointer++ = '\r';
+                    break;
+                case 't':
+                    *output_pointer++ = '\t';
+                    break;
+                case '\"':
+                case '\\':
+                case '/':
+                    *output_pointer++ = input_pointer[1];
+                    break;
+
+                /* UTF-16 literal */
+                case 'u':
+                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
+                    if (sequence_length == 0)
+                    {
+                        /* failed to convert UTF16-literal to UTF-8 */
+                        goto fail;
+                    }
+                    break;
+
+                default:
+                    goto fail;
+            }
+            input_pointer += sequence_length;
+        }
+    }
+
+    /* zero terminate the output */
+    *output_pointer = '\0';
+
+    item->type = cJSON_String;
+    item->valuestring = (char*)output;
+
+    input_buffer->offset = (size_t) (input_end - input_buffer->content);
+    input_buffer->offset++;
+
+    return true;
+
+fail:
+    if (output != NULL)
+    {
+        input_buffer->hooks.deallocate(output);
+    }
+
+    if (input_pointer != NULL)
+    {
+        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
+    }
+
+    return false;
+}
+
+/* Render the cstring provided to an escaped version that can be printed. */
+static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
+{
+    const unsigned char *input_pointer = NULL;
+    unsigned char *output = NULL;
+    unsigned char *output_pointer = NULL;
+    size_t output_length = 0;
+    /* numbers of additional characters needed for escaping */
+    size_t escape_characters = 0;
+
+    if (output_buffer == NULL)
+    {
+        return false;
+    }
+
+    /* empty string */
+    if (input == NULL)
+    {
+        output = ensure(output_buffer, sizeof("\"\""));
+        if (output == NULL)
+        {
+            return false;
+        }
+        strcpy((char*)output, "\"\"");
+
+        return true;
+    }
+
+    /* set "flag" to 1 if something needs to be escaped */
+    for (input_pointer = input; *input_pointer; input_pointer++)
+    {
+        switch (*input_pointer)
+        {
+            case '\"':
+            case '\\':
+            case '\b':
+            case '\f':
+            case '\n':
+            case '\r':
+            case '\t':
+                /* one character escape sequence */
+                escape_characters++;
+                break;
+            default:
+                if (*input_pointer < 32)
+                {
+                    /* UTF-16 escape sequence uXXXX */
+                    escape_characters += 5;
+                }
+                break;
+        }
+    }
+    output_length = (size_t)(input_pointer - input) + escape_characters;
+
+    output = ensure(output_buffer, output_length + sizeof("\"\""));
+    if (output == NULL)
+    {
+        return false;
+    }
+
+    /* no characters have to be escaped */
+    if (escape_characters == 0)
+    {
+        output[0] = '\"';
+        memcpy(output + 1, input, output_length);
+        output[output_length + 1] = '\"';
+        output[output_length + 2] = '\0';
+
+        return true;
+    }
+
+    output[0] = '\"';
+    output_pointer = output + 1;
+    /* copy the string */
+    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
+    {
+        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
+        {
+            /* normal character, copy */
+            *output_pointer = *input_pointer;
+        }
+        else
+        {
+            /* character needs to be escaped */
+            *output_pointer++ = '\\';
+            switch (*input_pointer)
+            {
+                case '\\':
+                    *output_pointer = '\\';
+                    break;
+                case '\"':
+                    *output_pointer = '\"';
+                    break;
+                case '\b':
+                    *output_pointer = 'b';
+                    break;
+                case '\f':
+                    *output_pointer = 'f';
+                    break;
+                case '\n':
+                    *output_pointer = 'n';
+                    break;
+                case '\r':
+                    *output_pointer = 'r';
+                    break;
+                case '\t':
+                    *output_pointer = 't';
+                    break;
+                default:
+                    /* escape and print as unicode codepoint */
+                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
+                    output_pointer += 4;
+                    break;
+            }
+        }
+    }
+    output[output_length + 1] = '\"';
+    output[output_length + 2] = '\0';
+
+    return true;
+}
+
+/* Invoke print_string_ptr (which is useful) on an item. */
+static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
+{
+    return print_string_ptr((unsigned char*)item->valuestring, p);
+}
+
+/* Predeclare these prototypes. */
+static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer);
+static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer);
+static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer);
+static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer);
+static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
+static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);
+
+/* Utility to jump whitespace and cr/lf */
+static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
+{
+    if ((buffer == NULL) || (buffer->content == NULL))
+    {
+        return NULL;
+    }
+
+    if (cannot_access_at_index(buffer, 0))
+    {
+        return buffer;
+    }
+
+    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
+    {
+       buffer->offset++;
+    }
+
+    if (buffer->offset == buffer->length)
+    {
+        buffer->offset--;
+    }
+
+    return buffer;
+}
+
+/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
+static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
+{
+    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
+    {
+        return NULL;
+    }
+
+    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
+    {
+        buffer->offset += 3;
+    }
+
+    return buffer;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
+{
+    size_t buffer_length;
+
+    if (NULL == value)
+    {
+        return NULL;
+    }
+
+    /* Adding null character size due to require_null_terminated. */
+    buffer_length = strlen(value) + sizeof("");
+
+    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
+}
+
+/* Parse an object - create a new root, and populate. */
+CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
+{
+    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
+    cJSON *item = NULL;
+
+    /* reset error position */
+    global_error.json = NULL;
+    global_error.position = 0;
+
+    if (value == NULL || 0 == buffer_length)
+    {
+        goto fail;
+    }
+
+    buffer.content = (const unsigned char*)value;
+    buffer.length = buffer_length; 
+    buffer.offset = 0;
+    buffer.hooks = global_hooks;
+
+    item = cJSON_New_Item(&global_hooks);
+    if (item == NULL) /* memory fail */
+    {
+        goto fail;
+    }
+
+    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
+    {
+        /* parse failure. ep is set. */
+        goto fail;
+    }
+
+    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
+    if (require_null_terminated)
+    {
+        buffer_skip_whitespace(&buffer);
+        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
+        {
+            goto fail;
+        }
+    }
+    if (return_parse_end)
+    {
+        *return_parse_end = (const char*)buffer_at_offset(&buffer);
+    }
+
+    return item;
+
+fail:
+    if (item != NULL)
+    {
+        cJSON_Delete(item);
+    }
+
+    if (value != NULL)
+    {
+        error local_error;
+        local_error.json = (const unsigned char*)value;
+        local_error.position = 0;
+
+        if (buffer.offset < buffer.length)
+        {
+            local_error.position = buffer.offset;
+        }
+        else if (buffer.length > 0)
+        {
+            local_error.position = buffer.length - 1;
+        }
+
+        if (return_parse_end != NULL)
+        {
+            *return_parse_end = (const char*)local_error.json + local_error.position;
+        }
+
+        global_error = local_error;
+    }
+
+    return NULL;
+}
+
+/* Default options for cJSON_Parse */
+CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
+{
+    return cJSON_ParseWithOpts(value, 0, 0);
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
+{
+    return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
+}
+
+#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))
+
+static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
+{
+    static const size_t default_buffer_size = 256;
+    printbuffer buffer[1];
+    unsigned char *printed = NULL;
+
+    memset(buffer, 0, sizeof(buffer));
+
+    /* create buffer */
+    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
+    buffer->length = default_buffer_size;
+    buffer->format = format;
+    buffer->hooks = *hooks;
+    if (buffer->buffer == NULL)
+    {
+        goto fail;
+    }
+
+    /* print the value */
+    if (!print_value(item, buffer))
+    {
+        goto fail;
+    }
+    update_offset(buffer);
+
+    /* check if reallocate is available */
+    if (hooks->reallocate != NULL)
+    {
+        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
+        if (printed == NULL) {
+            goto fail;
+        }
+        buffer->buffer = NULL;
+    }
+    else /* otherwise copy the JSON over to a new buffer */
+    {
+        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
+        if (printed == NULL)
+        {
+            goto fail;
+        }
+        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
+        printed[buffer->offset] = '\0'; /* just to be sure */
+
+        /* free the buffer */
+        hooks->deallocate(buffer->buffer);
+    }
+
+    return printed;
+
+fail:
+    if (buffer->buffer != NULL)
+    {
+        hooks->deallocate(buffer->buffer);
+    }
+
+    if (printed != NULL)
+    {
+        hooks->deallocate(printed);
+    }
+
+    return NULL;
+}
+
+/* Render a cJSON item/entity/structure to text. */
+CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
+{
+    return (char*)print(item, true, &global_hooks);
+}
+
+CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
+{
+    return (char*)print(item, false, &global_hooks);
+}
+
+CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)
+{
+    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
+
+    if (prebuffer < 0)
+    {
+        return NULL;
+    }
+
+    p.buffer = (unsigned char*)global_hooks.allocate((size_t)prebuffer);
+    if (!p.buffer)
+    {
+        return NULL;
+    }
+
+    p.length = (size_t)prebuffer;
+    p.offset = 0;
+    p.noalloc = false;
+    p.format = fmt;
+    p.hooks = global_hooks;
+
+    if (!print_value(item, &p))
+    {
+        global_hooks.deallocate(p.buffer);
+        return NULL;
+    }
+
+    return (char*)p.buffer;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)
+{
+    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
+
+    if ((length < 0) || (buffer == NULL))
+    {
+        return false;
+    }
+
+    p.buffer = (unsigned char*)buffer;
+    p.length = (size_t)length;
+    p.offset = 0;
+    p.noalloc = true;
+    p.format = format;
+    p.hooks = global_hooks;
+
+    return print_value(item, &p);
+}
+
+/* Parser core - when encountering text, process appropriately. */
+static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
+{
+    if ((input_buffer == NULL) || (input_buffer->content == NULL))
+    {
+        return false; /* no input */
+    }
+
+    /* parse the different types of values */
+    /* null */
+    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
+    {
+        item->type = cJSON_NULL;
+        input_buffer->offset += 4;
+        return true;
+    }
+    /* false */
+    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
+    {
+        item->type = cJSON_False;
+        input_buffer->offset += 5;
+        return true;
+    }
+    /* true */
+    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
+    {
+        item->type = cJSON_True;
+        item->valueint = 1;
+        input_buffer->offset += 4;
+        return true;
+    }
+    /* string */
+    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
+    {
+        return parse_string(item, input_buffer);
+    }
+    /* number */
+    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
+    {
+        return parse_number(item, input_buffer);
+    }
+    /* array */
+    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
+    {
+        return parse_array(item, input_buffer);
+    }
+    /* object */
+    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
+    {
+        return parse_object(item, input_buffer);
+    }
+
+    return false;
+}
+
+/* Render a value to text. */
+static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
+{
+    unsigned char *output = NULL;
+
+    if ((item == NULL) || (output_buffer == NULL))
+    {
+        return false;
+    }
+
+    switch ((item->type) & 0xFF)
+    {
+        case cJSON_NULL:
+            output = ensure(output_buffer, 5);
+            if (output == NULL)
+            {
+                return false;
+            }
+            strcpy((char*)output, "null");
+            return true;
+
+        case cJSON_False:
+            output = ensure(output_buffer, 6);
+            if (output == NULL)
+            {
+                return false;
+            }
+            strcpy((char*)output, "false");
+            return true;
+
+        case cJSON_True:
+            output = ensure(output_buffer, 5);
+            if (output == NULL)
+            {
+                return false;
+            }
+            strcpy((char*)output, "true");
+            return true;
+
+        case cJSON_Number:
+            return print_number(item, output_buffer);
+
+        case cJSON_Raw:
+        {
+            size_t raw_length = 0;
+            if (item->valuestring == NULL)
+            {
+                return false;
+            }
+
+            raw_length = strlen(item->valuestring) + sizeof("");
+            output = ensure(output_buffer, raw_length);
+            if (output == NULL)
+            {
+                return false;
+            }
+            memcpy(output, item->valuestring, raw_length);
+            return true;
+        }
+
+        case cJSON_String:
+            return print_string(item, output_buffer);
+
+        case cJSON_Array:
+            return print_array(item, output_buffer);
+
+        case cJSON_Object:
+            return print_object(item, output_buffer);
+
+        default:
+            return false;
+    }
+}
+
+/* Build an array from input text. */
+static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
+{
+    cJSON *head = NULL; /* head of the linked list */
+    cJSON *current_item = NULL;
+
+    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
+    {
+        return false; /* to deeply nested */
+    }
+    input_buffer->depth++;
+
+    if (buffer_at_offset(input_buffer)[0] != '[')
+    {
+        /* not an array */
+        goto fail;
+    }
+
+    input_buffer->offset++;
+    buffer_skip_whitespace(input_buffer);
+    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
+    {
+        /* empty array */
+        goto success;
+    }
+
+    /* check if we skipped to the end of the buffer */
+    if (cannot_access_at_index(input_buffer, 0))
+    {
+        input_buffer->offset--;
+        goto fail;
+    }
+
+    /* step back to character in front of the first element */
+    input_buffer->offset--;
+    /* loop through the comma separated array elements */
+    do
+    {
+        /* allocate next item */
+        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
+        if (new_item == NULL)
+        {
+            goto fail; /* allocation failure */
+        }
+
+        /* attach next item to list */
+        if (head == NULL)
+        {
+            /* start the linked list */
+            current_item = head = new_item;
+        }
+        else
+        {
+            /* add to the end and advance */
+            current_item->next = new_item;
+            new_item->prev = current_item;
+            current_item = new_item;
+        }
+
+        /* parse next value */
+        input_buffer->offset++;
+        buffer_skip_whitespace(input_buffer);
+        if (!parse_value(current_item, input_buffer))
+        {
+            goto fail; /* failed to parse value */
+        }
+        buffer_skip_whitespace(input_buffer);
+    }
+    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
+
+    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
+    {
+        goto fail; /* expected end of array */
+    }
+
+success:
+    input_buffer->depth--;
+
+    if (head != NULL) {
+        head->prev = current_item;
+    }
+
+    item->type = cJSON_Array;
+    item->child = head;
+
+    input_buffer->offset++;
+
+    return true;
+
+fail:
+    if (head != NULL)
+    {
+        cJSON_Delete(head);
+    }
+
+    return false;
+}
+
+/* Render an array to text */
+static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
+{
+    unsigned char *output_pointer = NULL;
+    size_t length = 0;
+    cJSON *current_element = item->child;
+
+    if (output_buffer == NULL)
+    {
+        return false;
+    }
+
+    /* Compose the output array. */
+    /* opening square bracket */
+    output_pointer = ensure(output_buffer, 1);
+    if (output_pointer == NULL)
+    {
+        return false;
+    }
+
+    *output_pointer = '[';
+    output_buffer->offset++;
+    output_buffer->depth++;
+
+    while (current_element != NULL)
+    {
+        if (!print_value(current_element, output_buffer))
+        {
+            return false;
+        }
+        update_offset(output_buffer);
+        if (current_element->next)
+        {
+            length = (size_t) (output_buffer->format ? 2 : 1);
+            output_pointer = ensure(output_buffer, length + 1);
+            if (output_pointer == NULL)
+            {
+                return false;
+            }
+            *output_pointer++ = ',';
+            if(output_buffer->format)
+            {
+                *output_pointer++ = ' ';
+            }
+            *output_pointer = '\0';
+            output_buffer->offset += length;
+        }
+        current_element = current_element->next;
+    }
+
+    output_pointer = ensure(output_buffer, 2);
+    if (output_pointer == NULL)
+    {
+        return false;
+    }
+    *output_pointer++ = ']';
+    *output_pointer = '\0';
+    output_buffer->depth--;
+
+    return true;
+}
+
+/* Build an object from the text. */
+static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
+{
+    cJSON *head = NULL; /* linked list head */
+    cJSON *current_item = NULL;
+
+    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
+    {
+        return false; /* to deeply nested */
+    }
+    input_buffer->depth++;
+
+    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
+    {
+        goto fail; /* not an object */
+    }
+
+    input_buffer->offset++;
+    buffer_skip_whitespace(input_buffer);
+    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
+    {
+        goto success; /* empty object */
+    }
+
+    /* check if we skipped to the end of the buffer */
+    if (cannot_access_at_index(input_buffer, 0))
+    {
+        input_buffer->offset--;
+        goto fail;
+    }
+
+    /* step back to character in front of the first element */
+    input_buffer->offset--;
+    /* loop through the comma separated array elements */
+    do
+    {
+        /* allocate next item */
+        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
+        if (new_item == NULL)
+        {
+            goto fail; /* allocation failure */
+        }
+
+        /* attach next item to list */
+        if (head == NULL)
+        {
+            /* start the linked list */
+            current_item = head = new_item;
+        }
+        else
+        {
+            /* add to the end and advance */
+            current_item->next = new_item;
+            new_item->prev = current_item;
+            current_item = new_item;
+        }
+
+        /* parse the name of the child */
+        input_buffer->offset++;
+        buffer_skip_whitespace(input_buffer);
+        if (!parse_string(current_item, input_buffer))
+        {
+            goto fail; /* failed to parse name */
+        }
+        buffer_skip_whitespace(input_buffer);
+
+        /* swap valuestring and string, because we parsed the name */
+        current_item->string = current_item->valuestring;
+        current_item->valuestring = NULL;
+
+        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
+        {
+            goto fail; /* invalid object */
+        }
+
+        /* parse the value */
+        input_buffer->offset++;
+        buffer_skip_whitespace(input_buffer);
+        if (!parse_value(current_item, input_buffer))
+        {
+            goto fail; /* failed to parse value */
+        }
+        buffer_skip_whitespace(input_buffer);
+    }
+    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
+
+    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
+    {
+        goto fail; /* expected end of object */
+    }
+
+success:
+    input_buffer->depth--;
+
+    if (head != NULL) {
+        head->prev = current_item;
+    }
+
+    item->type = cJSON_Object;
+    item->child = head;
+
+    input_buffer->offset++;
+    return true;
+
+fail:
+    if (head != NULL)
+    {
+        cJSON_Delete(head);
+    }
+
+    return false;
+}
+
+/* Render an object to text. */
+static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
+{
+    unsigned char *output_pointer = NULL;
+    size_t length = 0;
+    cJSON *current_item = item->child;
+
+    if (output_buffer == NULL)
+    {
+        return false;
+    }
+
+    /* Compose the output: */
+    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
+    output_pointer = ensure(output_buffer, length + 1);
+    if (output_pointer == NULL)
+    {
+        return false;
+    }
+
+    *output_pointer++ = '{';
+    output_buffer->depth++;
+    if (output_buffer->format)
+    {
+        *output_pointer++ = '\n';
+    }
+    output_buffer->offset += length;
+
+    while (current_item)
+    {
+        if (output_buffer->format)
+        {
+            size_t i;
+            output_pointer = ensure(output_buffer, output_buffer->depth);
+            if (output_pointer == NULL)
+            {
+                return false;
+            }
+            for (i = 0; i < output_buffer->depth; i++)
+            {
+                *output_pointer++ = '\t';
+            }
+            output_buffer->offset += output_buffer->depth;
+        }
+
+        /* print key */
+        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
+        {
+            return false;
+        }
+        update_offset(output_buffer);
+
+        length = (size_t) (output_buffer->format ? 2 : 1);
+        output_pointer = ensure(output_buffer, length);
+        if (output_pointer == NULL)
+        {
+            return false;
+        }
+        *output_pointer++ = ':';
+        if (output_buffer->format)
+        {
+            *output_pointer++ = '\t';
+        }
+        output_buffer->offset += length;
+
+        /* print value */
+        if (!print_value(current_item, output_buffer))
+        {
+            return false;
+        }
+        update_offset(output_buffer);
+
+        /* print comma if not last */
+        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
+        output_pointer = ensure(output_buffer, length + 1);
+        if (output_pointer == NULL)
+        {
+            return false;
+        }
+        if (current_item->next)
+        {
+            *output_pointer++ = ',';
+        }
+
+        if (output_buffer->format)
+        {
+            *output_pointer++ = '\n';
+        }
+        *output_pointer = '\0';
+        output_buffer->offset += length;
+
+        current_item = current_item->next;
+    }
+
+    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
+    if (output_pointer == NULL)
+    {
+        return false;
+    }
+    if (output_buffer->format)
+    {
+        size_t i;
+        for (i = 0; i < (output_buffer->depth - 1); i++)
+        {
+            *output_pointer++ = '\t';
+        }
+    }
+    *output_pointer++ = '}';
+    *output_pointer = '\0';
+    output_buffer->depth--;
+
+    return true;
+}
+
+/* Get Array size/item / object item. */
+CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
+{
+    cJSON *child = NULL;
+    size_t size = 0;
+
+    if (array == NULL)
+    {
+        return 0;
+    }
+
+    child = array->child;
+
+    while(child != NULL)
+    {
+        size++;
+        child = child->next;
+    }
+
+    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */
+
+    return (int)size;
+}
+
+static cJSON* get_array_item(const cJSON *array, size_t index)
+{
+    cJSON *current_child = NULL;
+
+    if (array == NULL)
+    {
+        return NULL;
+    }
+
+    current_child = array->child;
+    while ((current_child != NULL) && (index > 0))
+    {
+        index--;
+        current_child = current_child->next;
+    }
+
+    return current_child;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
+{
+    if (index < 0)
+    {
+        return NULL;
+    }
+
+    return get_array_item(array, (size_t)index);
+}
+
+static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
+{
+    cJSON *current_element = NULL;
+
+    if ((object == NULL) || (name == NULL))
+    {
+        return NULL;
+    }
+
+    current_element = object->child;
+    if (case_sensitive)
+    {
+        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
+        {
+            current_element = current_element->next;
+        }
+    }
+    else
+    {
+        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
+        {
+            current_element = current_element->next;
+        }
+    }
+
+    if ((current_element == NULL) || (current_element->string == NULL)) {
+        return NULL;
+    }
+
+    return current_element;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
+{
+    return get_object_item(object, string, false);
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
+{
+    return get_object_item(object, string, true);
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)
+{
+    return cJSON_GetObjectItem(object, string) ? 1 : 0;
+}
+
+/* Utility for array list handling. */
+static void suffix_object(cJSON *prev, cJSON *item)
+{
+    prev->next = item;
+    item->prev = prev;
+}
+
+/* Utility for handling references. */
+static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)
+{
+    cJSON *reference = NULL;
+    if (item == NULL)
+    {
+        return NULL;
+    }
+
+    reference = cJSON_New_Item(hooks);
+    if (reference == NULL)
+    {
+        return NULL;
+    }
+
+    memcpy(reference, item, sizeof(cJSON));
+    reference->string = NULL;
+    reference->type |= cJSON_IsReference;
+    reference->next = reference->prev = NULL;
+    return reference;
+}
+
+static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
+{
+    cJSON *child = NULL;
+
+    if ((item == NULL) || (array == NULL) || (array == item))
+    {
+        return false;
+    }
+
+    child = array->child;
+    /*
+     * To find the last item in array quickly, we use prev in array
+     */
+    if (child == NULL)
+    {
+        /* list is empty, start new one */
+        array->child = item;
+        item->prev = item;
+        item->next = NULL;
+    }
+    else
+    {
+        /* append to the end */
+        if (child->prev)
+        {
+            suffix_object(child->prev, item);
+            array->child->prev = item;
+        }
+    }
+
+    return true;
+}
+
+/* Add item to array/object. */
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
+{
+    return add_item_to_array(array, item);
+}
+
+#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
+    #pragma GCC diagnostic push
+#endif
+#ifdef __GNUC__
+#pragma GCC diagnostic ignored "-Wcast-qual"
+#endif
+/* helper function to cast away const */
+static void* cast_away_const(const void* string)
+{
+    return (void*)string;
+}
+#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
+    #pragma GCC diagnostic pop
+#endif
+
+
+static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
+{
+    char *new_key = NULL;
+    int new_type = cJSON_Invalid;
+
+    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
+    {
+        return false;
+    }
+
+    if (constant_key)
+    {
+        new_key = (char*)cast_away_const(string);
+        new_type = item->type | cJSON_StringIsConst;
+    }
+    else
+    {
+        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
+        if (new_key == NULL)
+        {
+            return false;
+        }
+
+        new_type = item->type & ~cJSON_StringIsConst;
+    }
+
+    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
+    {
+        hooks->deallocate(item->string);
+    }
+
+    item->string = new_key;
+    item->type = new_type;
+
+    return add_item_to_array(object, item);
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
+{
+    return add_item_to_object(object, string, item, &global_hooks, false);
+}
+
+/* Add an item to an object with constant string as key */
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)
+{
+    return add_item_to_object(object, string, item, &global_hooks, true);
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)
+{
+    if (array == NULL)
+    {
+        return false;
+    }
+
+    return add_item_to_array(array, create_reference(item, &global_hooks));
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)
+{
+    if ((object == NULL) || (string == NULL))
+    {
+        return false;
+    }
+
+    return add_item_to_object(object, string, create_reference(item, &global_hooks), &global_hooks, false);
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)
+{
+    cJSON *null = cJSON_CreateNull();
+    if (add_item_to_object(object, name, null, &global_hooks, false))
+    {
+        return null;
+    }
+
+    cJSON_Delete(null);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)
+{
+    cJSON *true_item = cJSON_CreateTrue();
+    if (add_item_to_object(object, name, true_item, &global_hooks, false))
+    {
+        return true_item;
+    }
+
+    cJSON_Delete(true_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)
+{
+    cJSON *false_item = cJSON_CreateFalse();
+    if (add_item_to_object(object, name, false_item, &global_hooks, false))
+    {
+        return false_item;
+    }
+
+    cJSON_Delete(false_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)
+{
+    cJSON *bool_item = cJSON_CreateBool(boolean);
+    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
+    {
+        return bool_item;
+    }
+
+    cJSON_Delete(bool_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
+{
+    cJSON *number_item = cJSON_CreateNumber(number);
+    if (add_item_to_object(object, name, number_item, &global_hooks, false))
+    {
+        return number_item;
+    }
+
+    cJSON_Delete(number_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
+{
+    cJSON *string_item = cJSON_CreateString(string);
+    if (add_item_to_object(object, name, string_item, &global_hooks, false))
+    {
+        return string_item;
+    }
+
+    cJSON_Delete(string_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)
+{
+    cJSON *raw_item = cJSON_CreateRaw(raw);
+    if (add_item_to_object(object, name, raw_item, &global_hooks, false))
+    {
+        return raw_item;
+    }
+
+    cJSON_Delete(raw_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)
+{
+    cJSON *object_item = cJSON_CreateObject();
+    if (add_item_to_object(object, name, object_item, &global_hooks, false))
+    {
+        return object_item;
+    }
+
+    cJSON_Delete(object_item);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)
+{
+    cJSON *array = cJSON_CreateArray();
+    if (add_item_to_object(object, name, array, &global_hooks, false))
+    {
+        return array;
+    }
+
+    cJSON_Delete(array);
+    return NULL;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)
+{
+    if ((parent == NULL) || (item == NULL))
+    {
+        return NULL;
+    }
+
+    if (item != parent->child)
+    {
+        /* not the first element */
+        item->prev->next = item->next;
+    }
+    if (item->next != NULL)
+    {
+        /* not the last element */
+        item->next->prev = item->prev;
+    }
+
+    if (item == parent->child)
+    {
+        /* first element */
+        parent->child = item->next;
+    }
+    else if (item->next == NULL)
+    {
+        /* last element */
+        parent->child->prev = item->prev;
+    }
+
+    /* make sure the detached item doesn't point anywhere anymore */
+    item->prev = NULL;
+    item->next = NULL;
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)
+{
+    if (which < 0)
+    {
+        return NULL;
+    }
+
+    return cJSON_DetachItemViaPointer(array, get_array_item(array, (size_t)which));
+}
+
+CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)
+{
+    cJSON_Delete(cJSON_DetachItemFromArray(array, which));
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)
+{
+    cJSON *to_detach = cJSON_GetObjectItem(object, string);
+
+    return cJSON_DetachItemViaPointer(object, to_detach);
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)
+{
+    cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(object, string);
+
+    return cJSON_DetachItemViaPointer(object, to_detach);
+}
+
+CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)
+{
+    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
+}
+
+CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)
+{
+    cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(object, string));
+}
+
+/* Replace array/object items with new ones. */
+CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)
+{
+    cJSON *after_inserted = NULL;
+
+    if (which < 0)
+    {
+        return false;
+    }
+
+    after_inserted = get_array_item(array, (size_t)which);
+    if (after_inserted == NULL)
+    {
+        return add_item_to_array(array, newitem);
+    }
+
+    newitem->next = after_inserted;
+    newitem->prev = after_inserted->prev;
+    after_inserted->prev = newitem;
+    if (after_inserted == array->child)
+    {
+        array->child = newitem;
+    }
+    else
+    {
+        newitem->prev->next = newitem;
+    }
+    return true;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
+{
+    if ((parent == NULL) || (replacement == NULL) || (item == NULL))
+    {
+        return false;
+    }
+
+    if (replacement == item)
+    {
+        return true;
+    }
+
+    replacement->next = item->next;
+    replacement->prev = item->prev;
+
+    if (replacement->next != NULL)
+    {
+        replacement->next->prev = replacement;
+    }
+    if (parent->child == item)
+    {
+        if (parent->child->prev == parent->child)
+        {
+            replacement->prev = replacement;
+        }
+        parent->child = replacement;
+    }
+    else
+    {   /*
+         * To find the last item in array quickly, we use prev in array.
+         * We can't modify the last item's next pointer where this item was the parent's child
+         */
+        if (replacement->prev != NULL)
+        {
+            replacement->prev->next = replacement;
+        }
+        if (replacement->next == NULL)
+        {
+            parent->child->prev = replacement;
+        }
+    }
+
+    item->next = NULL;
+    item->prev = NULL;
+    cJSON_Delete(item);
+
+    return true;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)
+{
+    if (which < 0)
+    {
+        return false;
+    }
+
+    return cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);
+}
+
+static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
+{
+    if ((replacement == NULL) || (string == NULL))
+    {
+        return false;
+    }
+
+    /* replace the name in the replacement */
+    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
+    {
+        cJSON_free(replacement->string);
+    }
+    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
+    replacement->type &= ~cJSON_StringIsConst;
+
+    return cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)
+{
+    return replace_item_in_object(object, string, newitem, false);
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)
+{
+    return replace_item_in_object(object, string, newitem, true);
+}
+
+/* Create basic types: */
+CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = cJSON_NULL;
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = cJSON_True;
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = cJSON_False;
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = boolean ? cJSON_True : cJSON_False;
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = cJSON_Number;
+        item->valuedouble = num;
+
+        /* use saturation in case of overflow */
+        if (num >= INT_MAX)
+        {
+            item->valueint = INT_MAX;
+        }
+        else if (num <= (double)INT_MIN)
+        {
+            item->valueint = INT_MIN;
+        }
+        else
+        {
+            item->valueint = (int)num;
+        }
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = cJSON_String;
+        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
+        if(!item->valuestring)
+        {
+            cJSON_Delete(item);
+            return NULL;
+        }
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if (item != NULL)
+    {
+        item->type = cJSON_String | cJSON_IsReference;
+        item->valuestring = (char*)cast_away_const(string);
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if (item != NULL) {
+        item->type = cJSON_Object | cJSON_IsReference;
+        item->child = (cJSON*)cast_away_const(child);
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if (item != NULL) {
+        item->type = cJSON_Array | cJSON_IsReference;
+        item->child = (cJSON*)cast_away_const(child);
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type = cJSON_Raw;
+        item->valuestring = (char*)cJSON_strdup((const unsigned char*)raw, &global_hooks);
+        if(!item->valuestring)
+        {
+            cJSON_Delete(item);
+            return NULL;
+        }
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if(item)
+    {
+        item->type=cJSON_Array;
+    }
+
+    return item;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
+{
+    cJSON *item = cJSON_New_Item(&global_hooks);
+    if (item)
+    {
+        item->type = cJSON_Object;
+    }
+
+    return item;
+}
+
+/* Create Arrays: */
+CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)
+{
+    size_t i = 0;
+    cJSON *n = NULL;
+    cJSON *p = NULL;
+    cJSON *a = NULL;
+
+    if ((count < 0) || (numbers == NULL))
+    {
+        return NULL;
+    }
+
+    a = cJSON_CreateArray();
+
+    for(i = 0; a && (i < (size_t)count); i++)
+    {
+        n = cJSON_CreateNumber(numbers[i]);
+        if (!n)
+        {
+            cJSON_Delete(a);
+            return NULL;
+        }
+        if(!i)
+        {
+            a->child = n;
+        }
+        else
+        {
+            suffix_object(p, n);
+        }
+        p = n;
+    }
+
+    if (a && a->child) {
+        a->child->prev = n;
+    }
+
+    return a;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)
+{
+    size_t i = 0;
+    cJSON *n = NULL;
+    cJSON *p = NULL;
+    cJSON *a = NULL;
+
+    if ((count < 0) || (numbers == NULL))
+    {
+        return NULL;
+    }
+
+    a = cJSON_CreateArray();
+
+    for(i = 0; a && (i < (size_t)count); i++)
+    {
+        n = cJSON_CreateNumber((double)numbers[i]);
+        if(!n)
+        {
+            cJSON_Delete(a);
+            return NULL;
+        }
+        if(!i)
+        {
+            a->child = n;
+        }
+        else
+        {
+            suffix_object(p, n);
+        }
+        p = n;
+    }
+
+    if (a && a->child) {
+        a->child->prev = n;
+    }
+
+    return a;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)
+{
+    size_t i = 0;
+    cJSON *n = NULL;
+    cJSON *p = NULL;
+    cJSON *a = NULL;
+
+    if ((count < 0) || (numbers == NULL))
+    {
+        return NULL;
+    }
+
+    a = cJSON_CreateArray();
+
+    for(i = 0; a && (i < (size_t)count); i++)
+    {
+        n = cJSON_CreateNumber(numbers[i]);
+        if(!n)
+        {
+            cJSON_Delete(a);
+            return NULL;
+        }
+        if(!i)
+        {
+            a->child = n;
+        }
+        else
+        {
+            suffix_object(p, n);
+        }
+        p = n;
+    }
+
+    if (a && a->child) {
+        a->child->prev = n;
+    }
+
+    return a;
+}
+
+CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count)
+{
+    size_t i = 0;
+    cJSON *n = NULL;
+    cJSON *p = NULL;
+    cJSON *a = NULL;
+
+    if ((count < 0) || (strings == NULL))
+    {
+        return NULL;
+    }
+
+    a = cJSON_CreateArray();
+
+    for (i = 0; a && (i < (size_t)count); i++)
+    {
+        n = cJSON_CreateString(strings[i]);
+        if(!n)
+        {
+            cJSON_Delete(a);
+            return NULL;
+        }
+        if(!i)
+        {
+            a->child = n;
+        }
+        else
+        {
+            suffix_object(p,n);
+        }
+        p = n;
+    }
+
+    if (a && a->child) {
+        a->child->prev = n;
+    }
+    
+    return a;
+}
+
+/* Duplication */
+CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)
+{
+    cJSON *newitem = NULL;
+    cJSON *child = NULL;
+    cJSON *next = NULL;
+    cJSON *newchild = NULL;
+
+    /* Bail on bad ptr */
+    if (!item)
+    {
+        goto fail;
+    }
+    /* Create new item */
+    newitem = cJSON_New_Item(&global_hooks);
+    if (!newitem)
+    {
+        goto fail;
+    }
+    /* Copy over all vars */
+    newitem->type = item->type & (~cJSON_IsReference);
+    newitem->valueint = item->valueint;
+    newitem->valuedouble = item->valuedouble;
+    if (item->valuestring)
+    {
+        newitem->valuestring = (char*)cJSON_strdup((unsigned char*)item->valuestring, &global_hooks);
+        if (!newitem->valuestring)
+        {
+            goto fail;
+        }
+    }
+    if (item->string)
+    {
+        newitem->string = (item->type&cJSON_StringIsConst) ? item->string : (char*)cJSON_strdup((unsigned char*)item->string, &global_hooks);
+        if (!newitem->string)
+        {
+            goto fail;
+        }
+    }
+    /* If non-recursive, then we're done! */
+    if (!recurse)
+    {
+        return newitem;
+    }
+    /* Walk the ->next chain for the child. */
+    child = item->child;
+    while (child != NULL)
+    {
+        newchild = cJSON_Duplicate(child, true); /* Duplicate (with recurse) each item in the ->next chain */
+        if (!newchild)
+        {
+            goto fail;
+        }
+        if (next != NULL)
+        {
+            /* If newitem->child already set, then crosswire ->prev and ->next and move on */
+            next->next = newchild;
+            newchild->prev = next;
+            next = newchild;
+        }
+        else
+        {
+            /* Set newitem->child and move to it */
+            newitem->child = newchild;
+            next = newchild;
+        }
+        child = child->next;
+    }
+    if (newitem && newitem->child)
+    {
+        newitem->child->prev = newchild;
+    }
+
+    return newitem;
+
+fail:
+    if (newitem != NULL)
+    {
+        cJSON_Delete(newitem);
+    }
+
+    return NULL;
+}
+
+static void skip_oneline_comment(char **input)
+{
+    *input += static_strlen("//");
+
+    for (; (*input)[0] != '\0'; ++(*input))
+    {
+        if ((*input)[0] == '\n') {
+            *input += static_strlen("\n");
+            return;
+        }
+    }
+}
+
+static void skip_multiline_comment(char **input)
+{
+    *input += static_strlen("/*");
+
+    for (; (*input)[0] != '\0'; ++(*input))
+    {
+        if (((*input)[0] == '*') && ((*input)[1] == '/'))
+        {
+            *input += static_strlen("*/");
+            return;
+        }
+    }
+}
+
+static void minify_string(char **input, char **output) {
+    (*output)[0] = (*input)[0];
+    *input += static_strlen("\"");
+    *output += static_strlen("\"");
+
+
+    for (; (*input)[0] != '\0'; (void)++(*input), ++(*output)) {
+        (*output)[0] = (*input)[0];
+
+        if ((*input)[0] == '\"') {
+            (*output)[0] = '\"';
+            *input += static_strlen("\"");
+            *output += static_strlen("\"");
+            return;
+        } else if (((*input)[0] == '\\') && ((*input)[1] == '\"')) {
+            (*output)[1] = (*input)[1];
+            *input += static_strlen("\"");
+            *output += static_strlen("\"");
+        }
+    }
+}
+
+CJSON_PUBLIC(void) cJSON_Minify(char *json)
+{
+    char *into = json;
+
+    if (json == NULL)
+    {
+        return;
+    }
+
+    while (json[0] != '\0')
+    {
+        switch (json[0])
+        {
+            case ' ':
+            case '\t':
+            case '\r':
+            case '\n':
+                json++;
+                break;
+
+            case '/':
+                if (json[1] == '/')
+                {
+                    skip_oneline_comment(&json);
+                }
+                else if (json[1] == '*')
+                {
+                    skip_multiline_comment(&json);
+                } else {
+                    json++;
+                }
+                break;
+
+            case '\"':
+                minify_string(&json, (char**)&into);
+                break;
+
+            default:
+                into[0] = json[0];
+                json++;
+                into++;
+        }
+    }
+
+    /* and null-terminate. */
+    *into = '\0';
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_Invalid;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_False;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xff) == cJSON_True;
+}
+
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & (cJSON_True | cJSON_False)) != 0;
+}
+CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_NULL;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_Number;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_String;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_Array;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_Object;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)
+{
+    if (item == NULL)
+    {
+        return false;
+    }
+
+    return (item->type & 0xFF) == cJSON_Raw;
+}
+
+CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)
+{
+    if ((a == NULL) || (b == NULL) || ((a->type & 0xFF) != (b->type & 0xFF)) || cJSON_IsInvalid(a))
+    {
+        return false;
+    }
+
+    /* check if type is valid */
+    switch (a->type & 0xFF)
+    {
+        case cJSON_False:
+        case cJSON_True:
+        case cJSON_NULL:
+        case cJSON_Number:
+        case cJSON_String:
+        case cJSON_Raw:
+        case cJSON_Array:
+        case cJSON_Object:
+            break;
+
+        default:
+            return false;
+    }
+
+    /* identical objects are equal */
+    if (a == b)
+    {
+        return true;
+    }
+
+    switch (a->type & 0xFF)
+    {
+        /* in these cases and equal type is enough */
+        case cJSON_False:
+        case cJSON_True:
+        case cJSON_NULL:
+            return true;
+
+        case cJSON_Number:
+            if (compare_double(a->valuedouble, b->valuedouble))
+            {
+                return true;
+            }
+            return false;
+
+        case cJSON_String:
+        case cJSON_Raw:
+            if ((a->valuestring == NULL) || (b->valuestring == NULL))
+            {
+                return false;
+            }
+            if (strcmp(a->valuestring, b->valuestring) == 0)
+            {
+                return true;
+            }
+
+            return false;
+
+        case cJSON_Array:
+        {
+            cJSON *a_element = a->child;
+            cJSON *b_element = b->child;
+
+            for (; (a_element != NULL) && (b_element != NULL);)
+            {
+                if (!cJSON_Compare(a_element, b_element, case_sensitive))
+                {
+                    return false;
+                }
+
+                a_element = a_element->next;
+                b_element = b_element->next;
+            }
+
+            /* one of the arrays is longer than the other */
+            if (a_element != b_element) {
+                return false;
+            }
+
+            return true;
+        }
+
+        case cJSON_Object:
+        {
+            cJSON *a_element = NULL;
+            cJSON *b_element = NULL;
+            cJSON_ArrayForEach(a_element, a)
+            {
+                /* TODO This has O(n^2) runtime, which is horrible! */
+                b_element = get_object_item(b, a_element->string, case_sensitive);
+                if (b_element == NULL)
+                {
+                    return false;
+                }
+
+                if (!cJSON_Compare(a_element, b_element, case_sensitive))
+                {
+                    return false;
+                }
+            }
+
+            /* doing this twice, once on a and b to prevent true comparison if a subset of b
+             * TODO: Do this the proper way, this is just a fix for now */
+            cJSON_ArrayForEach(b_element, b)
+            {
+                a_element = get_object_item(a, b_element->string, case_sensitive);
+                if (a_element == NULL)
+                {
+                    return false;
+                }
+
+                if (!cJSON_Compare(b_element, a_element, case_sensitive))
+                {
+                    return false;
+                }
+            }
+
+            return true;
+        }
+
+        default:
+            return false;
+    }
+}
+
+CJSON_PUBLIC(void *) cJSON_malloc(size_t size)
+{
+    return global_hooks.allocate(size);
+}
+
+CJSON_PUBLIC(void) cJSON_free(void *object)
+{
+    global_hooks.deallocate(object);
+}
diff --git a/src/cjson/cJSON.h b/src/cjson/cJSON.h
new file mode 100644
index 0000000..e97e5f4
--- /dev/null
+++ b/src/cjson/cJSON.h
@@ -0,0 +1,293 @@
+/*
+  Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy
+  of this software and associated documentation files (the "Software"), to deal
+  in the Software without restriction, including without limitation the rights
+  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+  copies of the Software, and to permit persons to whom the Software is
+  furnished to do so, subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in
+  all copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+  THE SOFTWARE.
+*/
+
+#ifndef cJSON__h
+#define cJSON__h
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+#if !defined(__WINDOWS__) && (defined(WIN32) || defined(WIN64) || defined(_MSC_VER) || defined(_WIN32))
+#define __WINDOWS__
+#endif
+
+#ifdef __WINDOWS__
+
+/* When compiling for windows, we specify a specific calling convention to avoid issues where we are being called from a project with a different default calling convention.  For windows you have 3 define options:
+
+CJSON_HIDE_SYMBOLS - Define this in the case where you don't want to ever dllexport symbols
+CJSON_EXPORT_SYMBOLS - Define this on library build when you want to dllexport symbols (default)
+CJSON_IMPORT_SYMBOLS - Define this if you want to dllimport symbol
+
+For *nix builds that support visibility attribute, you can define similar behavior by
+
+setting default visibility to hidden by adding
+-fvisibility=hidden (for gcc)
+or
+-xldscope=hidden (for sun cc)
+to CFLAGS
+
+then using the CJSON_API_VISIBILITY flag to "export" the same symbols the way CJSON_EXPORT_SYMBOLS does
+
+*/
+
+#define CJSON_CDECL __cdecl
+#define CJSON_STDCALL __stdcall
+
+/* export symbols by default, this is necessary for copy pasting the C and header file */
+#if !defined(CJSON_HIDE_SYMBOLS) && !defined(CJSON_IMPORT_SYMBOLS) && !defined(CJSON_EXPORT_SYMBOLS)
+#define CJSON_EXPORT_SYMBOLS
+#endif
+
+#if defined(CJSON_HIDE_SYMBOLS)
+#define CJSON_PUBLIC(type)   type CJSON_STDCALL
+#elif defined(CJSON_EXPORT_SYMBOLS)
+#define CJSON_PUBLIC(type)   __declspec(dllexport) type CJSON_STDCALL
+#elif defined(CJSON_IMPORT_SYMBOLS)
+#define CJSON_PUBLIC(type)   __declspec(dllimport) type CJSON_STDCALL
+#endif
+#else /* !__WINDOWS__ */
+#define CJSON_CDECL
+#define CJSON_STDCALL
+
+#if (defined(__GNUC__) || defined(__SUNPRO_CC) || defined (__SUNPRO_C)) && defined(CJSON_API_VISIBILITY)
+#define CJSON_PUBLIC(type)   __attribute__((visibility("default"))) type
+#else
+#define CJSON_PUBLIC(type) type
+#endif
+#endif
+
+/* project version */
+#define CJSON_VERSION_MAJOR 1
+#define CJSON_VERSION_MINOR 7
+#define CJSON_VERSION_PATCH 14
+
+#include <stddef.h>
+
+/* cJSON Types: */
+#define cJSON_Invalid (0)
+#define cJSON_False  (1 << 0)
+#define cJSON_True   (1 << 1)
+#define cJSON_NULL   (1 << 2)
+#define cJSON_Number (1 << 3)
+#define cJSON_String (1 << 4)
+#define cJSON_Array  (1 << 5)
+#define cJSON_Object (1 << 6)
+#define cJSON_Raw    (1 << 7) /* raw json */
+
+#define cJSON_IsReference 256
+#define cJSON_StringIsConst 512
+
+/* The cJSON structure: */
+typedef struct cJSON
+{
+    /* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */
+    struct cJSON *next;
+    struct cJSON *prev;
+    /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */
+    struct cJSON *child;
+
+    /* The type of the item, as above. */
+    int type;
+
+    /* The item's string, if type==cJSON_String  and type == cJSON_Raw */
+    char *valuestring;
+    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */
+    int valueint;
+    /* The item's number, if type==cJSON_Number */
+    double valuedouble;
+
+    /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */
+    char *string;
+} cJSON;
+
+typedef struct cJSON_Hooks
+{
+      /* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */
+      void *(CJSON_CDECL *malloc_fn)(size_t sz);
+      void (CJSON_CDECL *free_fn)(void *ptr);
+} cJSON_Hooks;
+
+typedef int cJSON_bool;
+
+/* Limits how deeply nested arrays/objects can be before cJSON rejects to parse them.
+ * This is to prevent stack overflows. */
+#ifndef CJSON_NESTING_LIMIT
+#define CJSON_NESTING_LIMIT 1000
+#endif
+
+/* returns the version of cJSON as a string */
+CJSON_PUBLIC(const char*) cJSON_Version(void);
+
+/* Supply malloc, realloc and free functions to cJSON */
+CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);
+
+/* Memory Management: the caller is always responsible to free the results from all variants of cJSON_Parse (with cJSON_Delete) and cJSON_Print (with stdlib free, cJSON_Hooks.free_fn, or cJSON_free as appropriate). The exception is cJSON_PrintPreallocated, where the caller has full responsibility of the buffer. */
+/* Supply a block of JSON, and this returns a cJSON object you can interrogate. */
+CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value);
+CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length);
+/* ParseWithOpts allows you to require (and check) that the JSON is null terminated, and to retrieve the pointer to the final byte parsed. */
+/* If you supply a ptr in return_parse_end and parsing fails, then return_parse_end will contain a pointer to the error so will match cJSON_GetErrorPtr(). */
+CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated);
+CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated);
+
+/* Render a cJSON entity to text for transfer/storage. */
+CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);
+/* Render a cJSON entity to text for transfer/storage without any formatting. */
+CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);
+/* Render a cJSON entity to text using a buffered strategy. prebuffer is a guess at the final size. guessing well reduces reallocation. fmt=0 gives unformatted, =1 gives formatted */
+CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt);
+/* Render a cJSON entity to text using a buffer already allocated in memory with given length. Returns 1 on success and 0 on failure. */
+/* NOTE: cJSON is not always 100% accurate in estimating how much memory it will use, so to be safe allocate 5 bytes more than you actually need */
+CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format);
+/* Delete a cJSON entity and all subentities. */
+CJSON_PUBLIC(void) cJSON_Delete(cJSON *item);
+
+/* Returns the number of items in an array (or object). */
+CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);
+/* Retrieve item number "index" from array "array". Returns NULL if unsuccessful. */
+CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index);
+/* Get item "string" from object. Case insensitive. */
+CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string);
+CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);
+CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string);
+/* For analysing failed parses. This returns a pointer to the parse error. You'll probably need to look a few chars back to make sense of it. Defined when cJSON_Parse() returns 0. 0 when cJSON_Parse() succeeds. */
+CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void);
+
+/* Check item type and return its value */
+CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item);
+CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item);
+
+/* These functions check the type of an item */
+CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);
+CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);
+
+/* These calls create a cJSON item of the appropriate type. */
+CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);
+CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);
+CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);
+CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);
+CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);
+CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);
+/* raw json */
+CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw);
+CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);
+CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);
+
+/* Create a string where valuestring references a string so
+ * it will not be freed by cJSON_Delete */
+CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string);
+/* Create an object/array that only references it's elements so
+ * they will not be freed by cJSON_Delete */
+CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);
+CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);
+
+/* These utilities create an Array of count items.
+ * The parameter count cannot be greater than the number of elements in the number array, otherwise array access will be out of bounds.*/
+CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count);
+CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count);
+CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count);
+CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count);
+
+/* Append item to the specified array/object. */
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item);
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);
+/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object.
+ * WARNING: When this function was used, make sure to always check that (item->type & cJSON_StringIsConst) is zero before
+ * writing to `item->string` */
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item);
+/* Append reference to item to the specified array/object. Use this when you want to add an existing cJSON to a new cJSON, but don't want to corrupt your existing cJSON. */
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);
+CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item);
+
+/* Remove/Detach items from Arrays/Objects. */
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item);
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which);
+CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which);
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string);
+CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string);
+CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string);
+CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string);
+
+/* Update array items. */
+CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem); /* Shifts pre-existing items to the right. */
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement);
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem);
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);
+CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object,const char *string,cJSON *newitem);
+
+/* Duplicate a cJSON item */
+CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse);
+/* Duplicate will create a new, identical cJSON item to the one you pass, in new memory that will
+ * need to be released. With recurse!=0, it will duplicate any children connected to the item.
+ * The item->next and ->prev pointers are always zero on return from Duplicate. */
+/* Recursively compare two cJSON items for equality. If either a or b is NULL or invalid, they will be considered unequal.
+ * case_sensitive determines if object keys are treated case sensitive (1) or case insensitive (0) */
+CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive);
+
+/* Minify a strings, remove blank characters(such as ' ', '\t', '\r', '\n') from strings.
+ * The input pointer json cannot point to a read-only address area, such as a string constant, 
+ * but should point to a readable and writable adress area. */
+CJSON_PUBLIC(void) cJSON_Minify(char *json);
+
+/* Helper functions for creating and adding items to an object at the same time.
+ * They return the added item or NULL on failure. */
+CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name);
+CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name);
+CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name);
+CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);
+CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);
+CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);
+CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw);
+CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name);
+CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name);
+
+/* When assigning an integer value, it needs to be propagated to valuedouble too. */
+#define cJSON_SetIntValue(object, number) ((object) ? (object)->valueint = (object)->valuedouble = (number) : (number))
+/* helper for the cJSON_SetNumberValue macro */
+CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number);
+#define cJSON_SetNumberValue(object, number) ((object != NULL) ? cJSON_SetNumberHelper(object, (double)number) : (number))
+/* Change the valuestring of a cJSON_String object, only takes effect when type of object is cJSON_String */
+CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring);
+
+/* Macro for iterating over an array or object */
+#define cJSON_ArrayForEach(element, array) for(element = (array != NULL) ? (array)->child : NULL; element != NULL; element = element->next)
+
+/* malloc/free objects using the malloc/free functions that have been set with cJSON_InitHooks */
+CJSON_PUBLIC(void *) cJSON_malloc(size_t size);
+CJSON_PUBLIC(void) cJSON_free(void *object);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/src/main.c b/src/main.c
index a018010..bdb8ac6 100644
--- a/src/main.c
+++ b/src/main.c
@@ -159,7 +159,7 @@ int main(int argc, char** argv) {
 
         /* if there is one result, output it and stop */
         if (res.num_results == 1) {
-            printf("%s\n", res.codes[0]);
+            printf("%s %s\n", res.parents[0], res.codes[0]);
         } else if (res.num_results > 1) {
             /* prompt the user for a module */
             fprintf(stderr, "[mii] ");
@@ -170,11 +170,27 @@ int main(int argc, char** argv) {
             if (select_colors) fprintf(stderr, "\033[1;37m");
             fprintf(stderr, ":\n");
 
+            /* compute the maximum code width */
+            int max_codewidth = 8;
+
+            for (int k = 0; k < res.num_results; ++k) {
+                int clen = strlen(res.codes[k]);
+                if (clen > max_codewidth) max_codewidth = clen;
+            }
+
+            if (select_colors) fprintf(stderr, "\033[1;37m");
+            fprintf(stderr, "       %-*s", max_codewidth, "MODULE");
+            fprintf(stderr, " %s\n", "PARENT(S)");
+            if (select_colors) fprintf(stderr, "\033[0;39m");
+
             for (int i = 0; i < res.num_results; ++i) {
                 if (select_colors) fprintf(stderr, "\033[2;39m");
                 fprintf(stderr, "    %-2d", i + 1);
                 if (select_colors) fprintf(stderr, "\033[0;39m");
-                fprintf(stderr, " %s\n", res.codes[i]);
+                fprintf(stderr, " %-*s", max_codewidth, res.codes[i]);
+                if (select_colors) fprintf(stderr, "\033[0;36m");
+                fprintf(stderr, " %s\n", res.parents[i]);
+                if (select_colors) fprintf(stderr, "\033[0;39m");
             }
 
             fprintf(stderr, "Make a selection (1-%d, q aborts) [1]: ", res.num_results);
@@ -204,7 +220,7 @@ int main(int argc, char** argv) {
             }
 
             /* finally output the chosen module */
-            printf("%s\n", res.codes[val]);
+            printf("%s %s\n", res.parents[val], res.codes[val]);
         } else {
             /* no results. we need to perform a fuzzy search now */
             mii_search_result_free(&res);
diff --git a/src/mii.c b/src/mii.c
index 4d4e632..e8008d2 100644
--- a/src/mii.c
+++ b/src/mii.c
@@ -77,7 +77,14 @@ int mii_build() {
 
     mii_modtable index;
     mii_modtable_init(&index);
+    int count;
 
+#if MII_ENABLE_SPIDER
+    if (mii_modtable_spider_gen(&index, _mii_modulepath, &count)) {
+        mii_error("Unexpected failure generating the index with spider!");
+        return -1;
+    }
+#else
     /* initialize analysis regular expressions */
     if (mii_analysis_init()) {
         mii_error("Unexpected failure initializing analysis functions!");
@@ -91,13 +98,13 @@ int mii_build() {
     }
 
     /* perform analysis over the entire index */
-    int count;
-
     if (mii_modtable_analysis(&index, &count)) {
         mii_error("Error occurred during index analysis, terminating!");
         return -1;
     }
 
+#endif
+
     if (count) {
         mii_info("Finished analysis on %d modules", count);
     } else {
@@ -112,7 +119,10 @@ int mii_build() {
 
     /* cleanup */
     mii_modtable_free(&index);
+
+#if !MII_ENABLE_SPIDER
     mii_analysis_free();
+#endif
 
     return 0;
 }
diff --git a/src/modtable.c b/src/modtable.c
index 60257bd..d03e7b2 100644
--- a/src/modtable.c
+++ b/src/modtable.c
@@ -7,6 +7,11 @@
 
 #include "xxhash/xxhash.h"
 
+#if MII_ENABLE_SPIDER
+#include "cjson/cJSON.h"
+#include <unistd.h>
+#endif
+
 #include <dirent.h>
 #include <errno.h>
 
@@ -20,13 +25,13 @@
 /* should never really need to change. identify the mii_modtable file format */
 static const unsigned char MII_MODTABLE_MAGIC_BYTES[] = { 0xBE, 0xE5 };
 
-int _mii_modtable_parse_from(mii_modtable* p, const char* path, int (*handler)(mii_modtable* p, char* path, char* code, char** bins, int num_bins, time_t timestamp));
+int _mii_modtable_parse_from(mii_modtable* p, const char* path, int (*handler)(mii_modtable* p, char* path, char* code, char** bins, int num_bins, char** parents, int num_parents, time_t timestamp));
 int _mii_modtable_get_target_index(const char* path);
 mii_modtable_entry* _mii_modtable_locate_entry(mii_modtable* p, const char* path);
 
 /* parse handlers */
-int _mii_modtable_parse_handler_import(mii_modtable* p, char* path, char* code, char** bins, int num_bins, time_t timestamp);
-int _mii_modtable_parse_handler_preanalysis(mii_modtable* p, char* path, char* code, char** bins, int num_bins, time_t timestamp);
+int _mii_modtable_parse_handler_import(mii_modtable* p, char* path, char* code, char** bins, int num_bins, char** parents, int num_parents, time_t timestamp);
+int _mii_modtable_parse_handler_preanalysis(mii_modtable* p, char* path, char* code, char** bins, int num_bins, char** parents, int num_parents, time_t timestamp);
 
 /* mii_modtable generation */
 int _mii_modtable_gen_recursive(mii_modtable* p, const char* root);
@@ -57,7 +62,12 @@ void mii_modtable_free(mii_modtable* p) {
                 free(cur->bins[j]);
             }
 
+            for (int j = 0; j < cur->num_parents; ++j) {
+                free(cur->parents[j]);
+            }
+
             free(cur->bins);
+            if (cur->num_parents > 0) free(cur->parents);
             tmp = cur->next;
 
             free(cur);
@@ -143,6 +153,7 @@ int mii_modtable_analysis(mii_modtable* p, int* num) {
                 if (!mii_analysis_run(cur->path, cur->type, &cur->bins, &cur->num_bins)) {
                     mii_debug("analysis for %s : %d bins", cur->path, cur->num_bins);
 
+                    cur->num_parents = 0;
                     cur->analysis_complete = 1;
                     ++count;
                 }
@@ -213,6 +224,16 @@ int mii_modtable_export(mii_modtable* p, const char* path) {
                 fwrite(cur->bins[j], 1, bin_len, f);
             }
 
+            /* write number of parents */
+            fwrite(&cur->num_parents, sizeof cur->num_parents, 1, f);
+
+            /* write parent codes size and data (if any) */
+            for (int j = 0; j < cur->num_parents; ++j) {
+                int parent_len = strlen(cur->parents[j]);
+                fwrite(&parent_len, sizeof parent_len, 1, f);
+                fwrite(cur->parents[j], 1, parent_len, f);
+            }
+
             cur = cur->next;
         }
     }
@@ -239,7 +260,15 @@ int mii_modtable_search_exact(mii_modtable* p, const char* cmd, mii_search_resul
         while (cur) {
             for (int j = 0; j < cur->num_bins; ++j) {
                 if (!strcmp(cur->bins[j], cmd)) {
-                    mii_search_result_add(res, cur->code, cmd, 0);
+                    /* show different parents as different results */
+                    for (int k = 0; k < cur->num_parents; ++k) {
+                        mii_search_result_add(res, cur->code, cmd, 0, cur->parents[k]);
+                    }
+
+                    /* if no parents, send null */
+                    if (cur->num_parents == 0) {
+                        mii_search_result_add(res, cur->code, cmd, 0, NULL);
+                    }
                 }
             }
 
@@ -247,6 +276,8 @@ int mii_modtable_search_exact(mii_modtable* p, const char* cmd, mii_search_resul
         }
     }
 
+    mii_search_result_sort(res);
+
     return 0;
 }
 
@@ -269,7 +300,15 @@ int mii_modtable_search_similar(mii_modtable* p, const char* cmd, mii_search_res
                 int dist = mii_levenshtein_distance(cmd, cur->bins[j]); 
 
                 if (dist < MII_MODTABLE_DISTANCE_THRESHOLD) {
-                    mii_search_result_add(res, cur->code, cur->bins[j], dist);
+                    /* show different parents as different results */
+                    for (int k = 0; k < cur->num_parents; ++k) {
+                        mii_search_result_add(res, cur->code, cur->bins[j], dist, cur->parents[k]);
+                    }
+
+                    /* if no parents, send null */
+                    if (cur->num_parents == 0) {
+                        mii_search_result_add(res, cur->code, cur->bins[j], dist, NULL);
+                    }
                 }
             }
 
@@ -297,7 +336,8 @@ int mii_modtable_search_info(mii_modtable* p, const char* code, mii_search_resul
         while (cur) {
             if (!strcmp(cur->code, code)) {
                 for (int j = 0; j < cur->num_bins; ++j) {
-                    mii_search_result_add(res, cur->code, cur->bins[j], 0);
+                    /* parent modules are not important here */
+                    mii_search_result_add(res, cur->code, cur->bins[j], 0, NULL);
                 }
 
                 break;
@@ -410,7 +450,7 @@ int _mii_modtable_gen_recursive_sub(mii_modtable* p, const char* root, const cha
  * <handler> is called for each imported module with allocated module info
  * if the handler returns nonzero this function is interrupted and returns immediately
  */
-int _mii_modtable_parse_from(mii_modtable* p, const char* path, int (*handler)(mii_modtable* p, char* path, char* code, char** bins, int num_bins, time_t timestamp)) {
+int _mii_modtable_parse_from(mii_modtable* p, const char* path, int (*handler)(mii_modtable* p, char* path, char* code, char** bins, int num_bins, char** parents, int num_parents, time_t timestamp)) {
     int res, num_modules;
 
     res = 0;
@@ -507,8 +547,36 @@ int _mii_modtable_parse_from(mii_modtable* p, const char* path, int (*handler)(m
             mod_bins[j][bin_size] = 0;
         }
 
+        /* read module parent */
+        int mod_num_parents;
+        if (fread(&mod_num_parents, sizeof mod_num_parents, 1, f) != 1) {
+            goto unexpected_eof;
+        }
+
+        char** mod_parents = NULL;
+        if (mod_num_parents) mod_parents = malloc(mod_num_parents * sizeof *mod_parents);
+
+        for (int j = 0; j < mod_num_parents; ++j) {
+            /* grab parent size */
+            int parent_size;
+
+            if (fread(&parent_size, sizeof parent_size, 1, f) != 1) {
+                goto unexpected_eof;
+            }
+
+            /* allocate and read parent data */
+            mod_parents[j] = malloc(parent_size + 1);
+
+            if (fread(mod_parents[j], 1, parent_size, f) != parent_size) {
+                goto unexpected_eof;
+            }
+
+            /* null-terminate parent string */
+            mod_parents[j][parent_size] = 0;
+        }
+
         /* that's all we need! call the handler */
-        if ((res = handler(p, mod_path, mod_code, mod_bins, mod_num_bins, mod_timestamp))) {
+        if ((res = handler(p, mod_path, mod_code, mod_bins, mod_num_bins, mod_parents, mod_num_parents, mod_timestamp))) {
             break;
         }
     }
@@ -522,7 +590,7 @@ int _mii_modtable_parse_from(mii_modtable* p, const char* path, int (*handler)(m
     return -1;
 }
 
-int _mii_modtable_parse_handler_import(mii_modtable* p, char* path, char* code, char** bins, int num_bins, time_t timestamp) {
+int _mii_modtable_parse_handler_import(mii_modtable* p, char* path, char* code, char** bins, int num_bins, char** parents, int num_parents, time_t timestamp) {
     /* import: just insert every module into the modtable and don't worry too much */
     int target_index = _mii_modtable_get_target_index(path);
 
@@ -532,6 +600,8 @@ int _mii_modtable_parse_handler_import(mii_modtable* p, char* path, char* code,
     new_entry->code = code;
     new_entry->bins = bins;
     new_entry->num_bins = num_bins;
+    new_entry->parents = parents;
+    new_entry->num_parents = num_parents;
     new_entry->timestamp = timestamp;
     new_entry->next = p->buf[target_index];
     new_entry->analysis_complete = 1;
@@ -543,7 +613,7 @@ int _mii_modtable_parse_handler_import(mii_modtable* p, char* path, char* code,
     return 0;
 }
 
-int _mii_modtable_parse_handler_preanalysis(mii_modtable* p, char* path, char* code, char** bins, int num_bins, time_t timestamp) {
+int _mii_modtable_parse_handler_preanalysis(mii_modtable* p, char* path, char* code, char** bins, int num_bins, char** parents, int num_parents, time_t timestamp) {
     /* preanalysis phase
      * locate any matching modules and check if they are up to date.
      * if so, then prefill the binary list.
@@ -557,6 +627,8 @@ int _mii_modtable_parse_handler_preanalysis(mii_modtable* p, char* path, char* c
 
         mod->bins = bins;
         mod->num_bins = num_bins;
+        mod->parents = parents;
+        mod->num_parents = num_parents;
         mod->analysis_complete = 1;
 
         --p->modules_requiring_analysis;
@@ -594,3 +666,88 @@ mii_modtable_entry* _mii_modtable_locate_entry(mii_modtable* p, const char* path
 
     return NULL;
 }
+
+#if MII_ENABLE_SPIDER
+
+/* generate the index using the spider command provided by Lmod */
+int mii_modtable_spider_gen(mii_modtable* p, const char* path, int* count) {
+    /* prepare and run spider cmd */
+    char* cmd = malloc(strlen(path) + strlen(MII_MODTABLE_SPIDER_CMD) + 2);
+    sprintf(cmd, "%s %s", MII_MODTABLE_SPIDER_CMD, path);
+    FILE* pf = popen(cmd, "r");
+
+    if (pf == NULL) {
+        mii_error("Couldn't execute %s: %s", cmd, strerror(errno));
+        free(cmd);
+        return -1;
+    }
+
+    free(cmd);
+
+    char buf[MII_MODTABLE_BUF_SIZE];
+    char* unparsed_json = NULL;
+    size_t json_len = 0;
+
+    /* read buffered cmd output */
+    for (size_t len = 0; (len = fread(buf, 1, sizeof(buf), pf)) > 0; json_len += len) {
+        unparsed_json = (char*) realloc(unparsed_json, json_len + len);
+
+        if (unparsed_json == NULL) {
+            mii_error("Couldn't allocate memory for JSON: %s", strerror(errno));
+            pclose(pf);
+            return -1;
+        }
+
+        memcpy(unparsed_json + json_len, buf, len);
+    }
+    pclose(pf);
+
+    /* replace newline by end of str */
+    unparsed_json[--json_len] = '\0';
+
+    if (unparsed_json == NULL) {
+        mii_error("The returned JSON was empty.");
+        free(unparsed_json);
+        return -1;
+    }
+
+    /* parse the json */
+    cJSON* json = cJSON_Parse(unparsed_json);
+    free(unparsed_json);
+
+    if (json == NULL) {
+        mii_error("Couldn't parse JSON : %s", cJSON_GetErrorPtr());
+        return -1;
+    }
+
+    /* iterate over every modulefile found by the spider */
+    for (cJSON* module = json->child; module != NULL; module = module->next) {
+        for (cJSON* modulefile = module->child; modulefile != NULL; modulefile = modulefile->next) {
+            /* allocate memory and get info */
+            mii_modtable_entry* new_module = malloc(sizeof *new_module);
+
+            if(mii_analysis_parse_module_json(modulefile, new_module)) {
+                mii_error("Couldn't parse JSON for module %s", modulefile->string);
+                free(new_module);
+                return -1;
+            }
+
+            mii_debug("analysis for %s : %d bins", new_module->path, new_module->num_bins);
+
+            /* add to the modtable */
+            int target_index = _mii_modtable_get_target_index(new_module->path);
+            new_module->next = p->buf[target_index];
+            p->buf[target_index] = new_module;
+
+            /* increment the counter */
+            ++p->num_modules;
+        }
+    }
+    cJSON_Delete(json);
+
+    *count = p->num_modules;
+
+    return 0;
+}
+
+#endif
diff --git a/src/modtable.h b/src/modtable.h
index 6bd4ddf..380e3d0 100644
--- a/src/modtable.h
+++ b/src/modtable.h
@@ -21,10 +21,13 @@
 #define MII_MODTABLE_MODTYPE_LMOD 0
 #define MII_MODTABLE_MODTYPE_TCL 1
 
+#define MII_MODTABLE_SPIDER_CMD "$LMOD_DIR/spider -o spider-json"
+#define MII_MODTABLE_BUF_SIZE 4096
+
 typedef struct _mii_modtable_entry {
     char* path, *code;
-    int type, num_bins;
-    char** bins;
+    int type, num_bins, num_parents;
+    char** bins, **parents;
     time_t timestamp;
     int analysis_complete; /* truthy if the bin list is confirmed to be complete */
     struct _mii_modtable_entry* next;
@@ -42,6 +45,10 @@ void mii_modtable_free(mii_modtable* p);
 int mii_modtable_gen(mii_modtable* p, char* modulepath); /* scan for modules and build a partial table */
 int mii_modtable_import(mii_modtable* p, const char* path); /* import an existing table from the disk */
 
+#if MII_ENABLE_SPIDER
+int mii_modtable_spider_gen(mii_modtable* p, const char* path, int* count);
+#endif
+
 int mii_modtable_preanalysis(mii_modtable* p, const char* path); /* preanalyze up-to-date modules */
 int mii_modtable_analysis(mii_modtable* p, int* count); /* perform analysis on all required modules */
 int mii_modtable_export(mii_modtable* p, const char* output_path); /* export table to disk, overwriting */
diff --git a/src/search_result.c b/src/search_result.c
index 3115699..d949299 100644
--- a/src/search_result.c
+++ b/src/search_result.c
@@ -8,6 +8,12 @@
 #include <stdio.h>
 #include <unistd.h>
 
+/* sorting helper functions */
+void _mii_search_result_swap(mii_search_result* res, int a, int b);
+int _mii_search_result_compare(mii_search_result* res, int a, int b);
+int _mii_search_result_compare_codes(const char* code_a, const char* code_b);
+int _mii_search_result_get_priority(const char* parents, const char* code);
+
 int mii_search_result_init(mii_search_result* dest, const char* query) {
     memset(dest, 0, sizeof *dest);
     dest->query = mii_strdup(query);
@@ -24,29 +30,36 @@ void mii_search_result_free(mii_search_result* dest) {
     /* drop result arrays */
     free(dest->codes);
     free(dest->bins);
+    free(dest->parents);
     free(dest->distances);
+    free(dest->priorities);
 }
 
-void mii_search_result_add(mii_search_result* p, const char* code, const char* bin, int distance) {
+void mii_search_result_add(mii_search_result* p, const char* code, const char* bin, int distance, const char* parents) {
     ++p->num_results;
 
     /* resize result arrays */
     p->codes = realloc(p->codes, p->num_results * sizeof *p->codes);
     p->bins = realloc(p->bins, p->num_results * sizeof *p->bins);
     p->distances = realloc(p->distances, p->num_results * sizeof *p->distances);
+    p->parents = realloc(p->parents, p->num_results * sizeof *p->parents);
+    p->priorities = realloc(p->priorities, p->num_results * sizeof *p->priorities);
 
     /* duplicate code/bin and insert into results */
     p->codes[p->num_results - 1] = mii_strdup(code);
     p->bins[p->num_results - 1] = mii_strdup(bin);
     p->distances[p->num_results - 1] = distance;
+    p->parents[p->num_results - 1] = (parents != NULL) ? mii_strdup(parents) : mii_strdup("");
+    p->priorities[p->num_results - 1] = _mii_search_result_get_priority(parents, code);
 }
 
-int mii_search_result_next(mii_search_result* p, char** code, char** bin, int* distance) {
+int mii_search_result_next(mii_search_result* p, char** code, char** bin, char** parent, int* distance) {
     if (p->cur_result >= p->num_results) return -1; /* no more results */
 
     /* give the caller whatever values they ask for */
     if (code) *code = p->bins[p->cur_result];
     if (bin) *bin = p->bins[p->cur_result];
+    if (parent) *parent = p->parents[p->cur_result];
     if (distance) *distance = p->distances[p->cur_result];
 
     ++p->cur_result;
@@ -66,7 +79,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             fprintf(f, "[\n");
 
             for (int i = 0; i < p->num_results; ++i) {
-                fprintf(f, "    { \"code\": \"%s\" },\n", p->codes[i]);
+                fprintf(f, "    { \"code\": \"%s\", \"parents\": \"%s\" },\n", p->codes[i], p->parents[i]);
             }
 
             fprintf(f, "]\n");
@@ -90,8 +103,20 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             } else {
                 if (should_color) fprintf(f, "\033[0;39m");
 
+                /* compute the maximum code + bin width */
+                int max_codewidth = 8, max_parentwidth = 11;
+
                 for (int k = 0; k < p->num_results; ++k) {
-                    fprintf(f, "    %s\n", p->codes[k]);
+                    int clen = strlen(p->codes[k]), plen = strlen(p->parents[k]);
+                    if (clen > max_codewidth) max_codewidth = clen;
+                    if (plen > max_parentwidth) max_parentwidth = plen;
+                }
+
+                for (int k = 0; k < p->num_results; ++k) {
+                    fprintf(f, "    %-*s", max_codewidth, p->codes[k]);
+                    if (should_color) fprintf(f, "\033[0;36m");
+                    fprintf(f, "    %-*s\n", max_parentwidth, p->parents[k]);
+                    if (should_color) fprintf(f, "\033[0;39m");
                 }
             }
         }
@@ -105,7 +130,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             fprintf(f, "[\n");
 
             for (int i = 0; i < p->num_results; ++i) {
-                fprintf(f, "    { \"code\": \"%s\", \"command\": \"%s\", \"distance\": %d },\n", p->codes[i], p->bins[i], p->distances[i]);
+                fprintf(f, "    { \"code\": \"%s\", \"command\": \"%s\", \"parents\": \"%s\", \"distance\": %d },\n", p->codes[i], p->bins[i], p->parents[i], p->distances[i]);
             }
 
             fprintf(f, "]\n");
@@ -138,13 +163,14 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             };
 
             /* compute the maximum code + bin width */
-            int max_codewidth = 8, max_binwidth = 9;
+            int max_codewidth = 8, max_binwidth = 9, max_parentwidth = 11;
 
             for (int k = 0; k < p->num_results; ++k) {
-                int clen = strlen(p->codes[k]), blen = strlen(p->bins[k]);
+                int clen = strlen(p->codes[k]), blen = strlen(p->bins[k]), plen = strlen(p->parents[k]);
 
                 if (clen > max_codewidth) max_codewidth = clen;
                 if (blen > max_binwidth) max_binwidth = blen;
+                if (plen > max_parentwidth) max_parentwidth = plen;
             }
 
             /* render everything in pretty columns and colors */
@@ -155,6 +181,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             } else {
                 fprintf(f, "    %-*s", max_codewidth, "MODULE");
                 fprintf(f, "    %-*s", max_binwidth, "COMMAND");
+                fprintf(f, "    %-*s", max_parentwidth, "PARENT(S)");
                 fprintf(f, "    %s\n", "RELEVANCE");
 
                 if (should_color) fprintf(f, "\033[0;39m");
@@ -166,6 +193,8 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
                     fprintf(f, "    %-*s", max_binwidth, p->bins[k]);
                     if (should_color) fprintf(f, "\033[0;39m");
 
+                    fprintf(f, "    %-*s", max_parentwidth, p->parents[k]);
+
                     if (should_color) fprintf(f, relevance_colors[p->distances[k]]);
                     fprintf(f, "    %s\n", relevance_strings[p->distances[k]]);
                     if (should_color) fprintf(f, "\033[0;39m");
@@ -215,38 +244,162 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
 }
 
 void mii_search_result_sort(mii_search_result* res) {
-    /* order results by lowest distance */
-    /* a simple selection sort will do fine */
-
-    char* tmp;
-    int min_dist, min_dist_index;
+    /* optimized bubble sort */
+    /* makes it easier to compare based on multiple factors */
 
     /* no results to sort */
     if (!res->num_results) return;
 
-    for (int i = 0; i < res->num_results - 1; ++i) {
-        min_dist = res->distances[i];
-        min_dist_index = i;
+    for (int i = 0, changed = 1; i < res->num_results - 1 && changed; ++i) {
+        changed = 0;
 
-        for (int j = i + 1; j < res->num_results; ++j) {
-            if (res->distances[j] < min_dist) {
-                min_dist = res->distances[j];
-                min_dist_index = j;
+        for (int j = 0; j < res->num_results - i - 1; ++j) {
+            if (_mii_search_result_compare(res, j, j + 1) > 0) {
+                _mii_search_result_swap(res, j, j + 1);
+                changed = 1;
             }
         }
+    }
+}
+
+void _mii_search_result_swap(mii_search_result* res, int a, int b) {
+    int tmp_num;
+
+    /* swap distances */
+    tmp_num = res->distances[a];
+    res->distances[a] = res->distances[b];
+    res->distances[b] = tmp_num;
+
+    /* swap priorities */
+    tmp_num = res->priorities[a];
+    res->priorities[a] = res->priorities[b];
+    res->priorities[b] = tmp_num;
+
+    char* tmp;
+
+    /* swap bins */
+    tmp = res->bins[a];
+    res->bins[a] = res->bins[b];
+    res->bins[b] = tmp;
+
+    /* swap codes */
+    tmp = res->codes[a];
+    res->codes[a] = res->codes[b];
+    res->codes[b] = tmp;
+
+    /* swap parents */
+    tmp = res->parents[a];
+    res->parents[a] = res->parents[b];
+    res->parents[b] = tmp;
+}
+
+/* compare different search results in the following order: */
+/* binary -> priority -> parent -> code */
+int _mii_search_result_compare(mii_search_result* res, int a, int b) {
+    int diff;
+
+    /* compare binary distances */
+    diff = res->distances[a] - res->distances[b];
+    if (diff > 0) return 1;
+    if (diff < 0) return -1;
+
+    /* compare priorities */
+    diff = res->priorities[a] - res->priorities[b];
+    if (diff < 0) return 1;
+    if (diff > 0) return -1;
+
+    /* compare parent alpha */
+    diff = strcmp(res->parents[a], res->parents[b]);
+    if (diff < 0) return 1;
+    if (diff > 0) return -1;
+
+    /* finally, compare code alpha + version */
+    return _mii_search_result_compare_codes(res->codes[a], res->codes[b]);
+}
+
+/* compare module names alphabetically and versions numerically */
+int _mii_search_result_compare_codes(const char* code1, const char* code2) {
+    char* code1_cpy = mii_strdup(code1);
+    char* code2_cpy = mii_strdup(code2);
+
+    char* p1, *p2;
+    int diff;
+
+    int is_versioned = (strchr(code1_cpy, '/') != NULL) && (strchr(code2_cpy, '/') != NULL);
+
+    /* if versioned, split accordingly */
+    if (is_versioned) {
+        /* fine since pointer stays at beginning */
+        code1_cpy = strtok_r(code1_cpy, "/", &p1);
+        code2_cpy = strtok_r(code2_cpy, "/", &p2);
+    }
+
+    diff = strcmp(code1_cpy, code2_cpy);
+
+    /* order found or only compare alphas, cleanup before returning */
+    if (diff != 0 && !is_versioned) {
+        free(code1_cpy);
+        free(code2_cpy);
+    }
+
+    if (diff > 0) return 1;
+    if (diff < 0) return -1;
+
+    if (!is_versioned) return 0;
+
+    /* compare versions numerically */
+    char* token1 = strtok_r(NULL, ".", &p1);
+    char* token2 = strtok_r(NULL, ".", &p2);
+
+    while(diff == 0 && token1 != NULL && token2 != NULL) {
+        diff = strtol(token1, NULL, 10) - strtol(token2, NULL, 10);
+        token1 = strtok_r(NULL, ".", &p1);
+        token2 = strtok_r(NULL, ".", &p2);
+    }
 
-        if (min_dist_index != i) {
-            /* swap rows */
-            res->distances[min_dist_index] = res->distances[i];
-            res->distances[i] = min_dist;
+    free(code1_cpy);
+    free(code2_cpy);
 
-            tmp = res->bins[min_dist_index];
-            res->bins[min_dist_index] = res->bins[i];
-            res->bins[i] = tmp;
+    if (diff < 0) return 1;
+    if (diff > 0) return -1;
 
-            tmp = res->codes[min_dist_index];
-            res->codes[min_dist_index] = res->codes[i];
-            res->codes[i] = tmp;
+    return 0;
+}
+
+int _mii_search_result_get_priority(const char* parents, const char* code) {
+    int priority = 0;
+    char* loaded_modules = getenv("LOADEDMODULES");
+
+    /* no modules loaded, no need to check */
+    if (loaded_modules == NULL) {
+        if (parents == NULL) return MII_SEARCH_RESULT_PRIORITY_NO_PARENT;
+        return 0;
+    }
+
+    /* iterate over every loaded module */
+    loaded_modules = mii_strdup(loaded_modules);
+    char* module_name = strtok(loaded_modules, ":");
+
+    while(module_name != NULL) {
+        /* check if module providing the cmd is already loaded */
+        if (strcmp(code, module_name) == 0) {
+            priority = MII_SEARCH_RESULT_PRIORITY_LOADED_MOD;
+            break;
         }
+
+        /* check if parent is already loaded */
+        if (parents != NULL && strstr(parents, module_name) != NULL) {
+            priority += MII_SEARCH_RESULT_PRIORITY_LOADED_PARENT;
+        }
+
+        module_name = strtok(NULL, ":");
     }
+    free(loaded_modules);
+
+    /* if no parents, but module is not loaded */
+    if (parents == NULL && priority != MII_SEARCH_RESULT_PRIORITY_LOADED_MOD) {
+        priority = MII_SEARCH_RESULT_PRIORITY_NO_PARENT;
+    }
+
+    return priority;
 }
diff --git a/src/search_result.h b/src/search_result.h
index 9b889d6..35b773c 100644
--- a/src/search_result.h
+++ b/src/search_result.h
@@ -6,6 +6,7 @@
  */
 
 #include <stdio.h>
+#include <limits.h>
 
 /*
  * export modes
@@ -18,6 +19,10 @@
 #define MII_SEARCH_RESULT_MODE_FUZZY 1
 #define MII_SEARCH_RESULT_MODE_SHOW  2
 
+#define MII_SEARCH_RESULT_PRIORITY_LOADED_PARENT 1
+#define MII_SEARCH_RESULT_PRIORITY_NO_PARENT     INT_MAX-1
+#define MII_SEARCH_RESULT_PRIORITY_LOADED_MOD    INT_MAX
+
 /*
  * output limit when printing fuzzy searches
  */
@@ -26,8 +31,8 @@
 
 typedef struct _mii_search_result {
     int num_results, cur_result;
-    char** codes, **bins, *query;
-    int* distances;
+    char** codes, **bins, **parents, *query;
+    int* distances, *priorities;
 } mii_search_result;
 
 /* structure init + cleanup */
@@ -37,7 +42,7 @@ void mii_search_result_free(mii_search_result* dest);
 
 /* adding results */
 
-void mii_search_result_add(mii_search_result* p, const char* code, const char* bin, int distance);
+void mii_search_result_add(mii_search_result* p, const char* code, const char* bin, int distance, const char* parent);
 
 /* sorting results */
 
@@ -45,7 +50,7 @@ void mii_search_result_sort(mii_search_result* p);
 
 /* reading/outputting results */
 
-int mii_search_result_next(mii_search_result* p, char** code, char** bin, int* distance);
+int mii_search_result_next(mii_search_result* p, char** code, char** bin, char** parent, int* distance);
 int mii_search_result_write(mii_search_result* p, FILE* f, int type, int flags);
 
 #endif

From ecd6f428ed2c1b4929af74c1a0c99d08438d3817 Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Thu, 29 Jul 2021 14:13:34 -0400
Subject: [PATCH 2/9] use selection sort instead of bubble sort

---
 src/search_result.c | 21 +++++++++++++--------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/src/search_result.c b/src/search_result.c
index d949299..3b9f9e2 100644
--- a/src/search_result.c
+++ b/src/search_result.c
@@ -244,21 +244,26 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
 }
 
 void mii_search_result_sort(mii_search_result* res) {
-    /* optimized bubble sort */
-    /* makes it easier to compare based on multiple factors */
+    /* order results based on multiple factors */
+    /* a simple selection sort will do fine */
+
+    int min_index;
 
     /* no results to sort */
     if (!res->num_results) return;
 
-    for (int i = 0, changed = 1; i < res->num_results - 1 && changed; ++i) {
-        changed = 0;
+    for (int i = 0; i < res->num_results - 1; ++i) {
+        min_index = i;
 
-        for (int j = 0; j < res->num_results - i - 1; ++j) {
-            if (_mii_search_result_compare(res, j, j + 1) > 0) {
-                _mii_search_result_swap(res, j, j + 1);
-                changed = 1;
+        for (int j = i + 1; j < res->num_results; ++j) {
+            if (_mii_search_result_compare(res, j, min_index) < 0) {
+                min_index = j;
             }
         }
+
+        if (min_index != i) {
+            _mii_search_result_swap(res, i, min_index);
+        }
     }
 }
 

From 27ad901680d74cb5993cade39ebbfaf1e6dfdb70 Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Thu, 29 Jul 2021 15:46:41 -0400
Subject: [PATCH 3/9] fix various memory leaks

Namely, the number of results was modified, so
not every search result was freed. Also, condition
to free tmp vars when sorting is fixed.
---
 src/search_result.c | 22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/src/search_result.c b/src/search_result.c
index 3b9f9e2..cf919eb 100644
--- a/src/search_result.c
+++ b/src/search_result.c
@@ -25,8 +25,11 @@ void mii_search_result_free(mii_search_result* dest) {
     for (int i = 0; i < dest->num_results; ++i) {
         free(dest->codes[i]);
         free(dest->bins[i]);
+        free(dest->parents[i]);
     }
 
+    free(dest->query);
+
     /* drop result arrays */
     free(dest->codes);
     free(dest->bins);
@@ -121,15 +124,16 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             }
         }
         break;
-    case MII_SEARCH_RESULT_MODE_FUZZY:
-        if (p->num_results > MII_SEARCH_RESULT_FUZZY_MAX) {
-            p->num_results = MII_SEARCH_RESULT_FUZZY_MAX;
+    case MII_SEARCH_RESULT_MODE_FUZZY: ;
+        int num_results = p->num_results;
+        if (num_results > MII_SEARCH_RESULT_FUZZY_MAX) {
+            num_results = MII_SEARCH_RESULT_FUZZY_MAX;
         }
 
         if (flags & MII_SEARCH_RESULT_JSON) {
             fprintf(f, "[\n");
 
-            for (int i = 0; i < p->num_results; ++i) {
+            for (int i = 0; i < num_results; ++i) {
                 fprintf(f, "    { \"code\": \"%s\", \"command\": \"%s\", \"parents\": \"%s\", \"distance\": %d },\n", p->codes[i], p->bins[i], p->parents[i], p->distances[i]);
             }
 
@@ -144,7 +148,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             if (should_color) fprintf(f, "\033[1;37m");
             fprintf(f, ":");
 
-            if (p->num_results) fprintf(f, " (total %d)", p->num_results);
+            if (num_results) fprintf(f, " (total %d)", num_results);
             fprintf(f, "\n");
 
             /* formatting strings/colors for relevance values */
@@ -165,7 +169,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             /* compute the maximum code + bin width */
             int max_codewidth = 8, max_binwidth = 9, max_parentwidth = 11;
 
-            for (int k = 0; k < p->num_results; ++k) {
+            for (int k = 0; k < num_results; ++k) {
                 int clen = strlen(p->codes[k]), blen = strlen(p->bins[k]), plen = strlen(p->parents[k]);
 
                 if (clen > max_codewidth) max_codewidth = clen;
@@ -174,7 +178,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
             }
 
             /* render everything in pretty columns and colors */
-            if (!p->num_results) {
+            if (!num_results) {
                 if (should_color) fprintf(f, "\033[2;37m");
                 fprintf(f, "    empty result set :(\n");
                 if (should_color) fprintf(f, "\033[0;39m");
@@ -186,7 +190,7 @@ int mii_search_result_write(mii_search_result* p, FILE* f, int mode, int flags)
 
                 if (should_color) fprintf(f, "\033[0;39m");
 
-                for (int k = 0; k < p->num_results; ++k) {
+                for (int k = 0; k < num_results; ++k) {
                     fprintf(f, "    %-*s", max_codewidth, p->codes[k]);
 
                     if (should_color) fprintf(f, "\033[0;36m");
@@ -342,7 +346,7 @@ int _mii_search_result_compare_codes(const char* code1, const char* code2) {
     diff = strcmp(code1_cpy, code2_cpy);
 
     /* order found or only compare alphas, cleanup before returning */
-    if (diff != 0 && !is_versioned) {
+    if (diff != 0 || !is_versioned) {
         free(code1_cpy);
         free(code2_cpy);
     }

From d5e9dcd1e83d18de4a89f4d5d03b16b04bb37a3a Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Thu, 29 Jul 2021 15:49:30 -0400
Subject: [PATCH 4/9] compare versions alphabetically if not number

Previously, when sorting, versions were compared based
only on numbers, but now they are also compared
alphabetically if they are not numbers.
---
 src/search_result.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/src/search_result.c b/src/search_result.c
index cf919eb..7157311 100644
--- a/src/search_result.c
+++ b/src/search_result.c
@@ -361,7 +361,16 @@ int _mii_search_result_compare_codes(const char* code1, const char* code2) {
     char* token2 = strtok_r(NULL, ".", &p2);
 
     while(diff == 0 && token1 != NULL && token2 != NULL) {
-        diff = strtol(token1, NULL, 10) - strtol(token2, NULL, 10);
+        char* endptr1, *endptr2;
+
+        diff = strtol(token1, &endptr1, 10) - strtol(token2, &endptr2, 10);
+
+        /* one of the tokens is not a number */
+        if (token1 == endptr1 || token2 == endptr2) {
+            /* flipped to fit with the strtol return */
+            diff = - strcmp(token1, token2);
+        }
+
         token1 = strtok_r(NULL, ".", &p1);
         token2 = strtok_r(NULL, ".", &p2);
     }

From df5c38610719b405780b470971555ea58b1645c2 Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Fri, 30 Jul 2021 10:35:14 -0400
Subject: [PATCH 5/9] check if LMOD_DIR is set when using spider

---
 src/modtable.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/modtable.c b/src/modtable.c
index d03e7b2..04ed38e 100644
--- a/src/modtable.c
+++ b/src/modtable.c
@@ -671,9 +671,15 @@ mii_modtable_entry* _mii_modtable_locate_entry(mii_modtable* p, const char* path
 
 /* generate the index using the spider command provided by Lmod */
 int mii_modtable_spider_gen(mii_modtable* p, const char* path, int* count) {
-    /* prepare and run spider cmd */
-    char* cmd = malloc(strlen(path) + strlen(MII_MODTABLE_SPIDER_CMD) + 2);
-    sprintf(cmd, "%s %s", MII_MODTABLE_SPIDER_CMD, path);
+    char* lmod_dir = getenv("LMOD_DIR");
+    if (lmod_dir == NULL || strlen(lmod_dir) == 0) {
+        mii_error("Couldn't find Lmod's directory. Please set LMOD_DIR.");
+        return -1;
+    }
+
+    /* generate the spider command and run it */
+    char* cmd = malloc(strlen(lmod_dir)+ strlen(path) + 23);
+    sprintf(cmd, "%s/%s %s", lmod_dir, "spider -o spider-json", path);
     FILE* pf = popen(cmd, "r");
 
     if (pf == NULL) {

From 11319d1bb171f06b78dda19e72425b64e209ad19 Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Fri, 30 Jul 2021 10:38:10 -0400
Subject: [PATCH 6/9] remove unused constant in modtable.h file

---
 src/modtable.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/modtable.h b/src/modtable.h
index 380e3d0..6b3f7ce 100644
--- a/src/modtable.h
+++ b/src/modtable.h
@@ -21,7 +21,7 @@
 #define MII_MODTABLE_MODTYPE_LMOD 0
 #define MII_MODTABLE_MODTYPE_TCL 1
 
-#define MII_MODTABLE_SPIDER_CMD "$LMOD_DIR/spider -o spider-json"
+#define MII_MODTABLE_SPIDER_CMD ""
 #define MII_MODTABLE_BUF_SIZE 4096
 
 typedef struct _mii_modtable_entry {

From be8ba38d3110154e52b855d3e273f466029ff562 Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Fri, 30 Jul 2021 11:06:51 -0400
Subject: [PATCH 7/9] add cJSON object cleanup when make clean

---
 makefile | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/makefile b/makefile
index e3e933e..6884b72 100644
--- a/makefile
+++ b/makefile
@@ -18,6 +18,8 @@ MII_LUA_LDFLAG  ?= -llua
 MII_LUA_INCLUDE ?=
 
 MII_ENABLE_SPIDER ?= no
+C_JSON_SOURCES     = src/cjson/cJSON.c
+C_JSON_OBJECTS     = $(C_JSON_SOURCES:.c=.o)
 
 ifeq ($(MII_ENABLE_LUA), yes)
 CFLAGS  += -DMII_ENABLE_LUA $(MII_LUA_INCLUDE)
@@ -27,7 +29,7 @@ endif
 
 ifeq ($(MII_ENABLE_SPIDER), yes)
 CFLAGS 	  += -DMII_ENABLE_SPIDER
-C_SOURCES += src/cjson/cJSON.c
+C_SOURCES += $(C_JSON_SOURCES)
 endif
 
 all: $(OUTPUTS)
@@ -42,7 +44,7 @@ $(LUA_OUTPUT): $(LUA_SOURCES)
 	$(LUAC) -o $@ $^
 
 clean:
-	rm -f $(C_OUTPUT) $(LUA_OUTPUT) $(C_OBJECTS)
+	rm -f $(C_OUTPUT) $(LUA_OUTPUT) $(C_OBJECTS) $(C_JSON_OBJECTS)
 
 install: $(OUTPUTS)
 	@echo "Installing mii to $(PREFIX)"

From 0df7e1e31c1181f90e2045daced5d0ffe67cf6cf Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Fri, 30 Jul 2021 11:53:57 -0400
Subject: [PATCH 8/9] fix bash integration not loading all modules

---
 init/common | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/init/common b/init/common
index dc2b554..8a9d406 100755
--- a/init/common
+++ b/init/common
@@ -13,10 +13,8 @@ mods=($($MII select "$1"))
 res=$?
 
 if [ $res = 0 ]; then
-    echo "[mii] loading $mods ..." 1>&2
-    for mod in $mods; do
-        module load $mod
-    done
+    echo "[mii] loading ${mods[@]} ..." 1>&2
+    module load ${mods[@]}
     $@
 elif [ $res = 2 ]; then
     echo "$1: command not found!" 1>&2

From 36a1e925102e8be8ba89250da628c45697e5b611 Mon Sep 17 00:00:00 2001
From: JLague <justin.lague@calculquebec.ca>
Date: Fri, 6 Aug 2021 11:17:30 -0400
Subject: [PATCH 9/9] fix off-by-one error

spider command size was off-by-one
---
 src/modtable.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/modtable.c b/src/modtable.c
index 04ed38e..81e12cd 100644
--- a/src/modtable.c
+++ b/src/modtable.c
@@ -678,7 +678,7 @@ int mii_modtable_spider_gen(mii_modtable* p, const char* path, int* count) {
     }
 
     /* generate the spider command and run it */
-    char* cmd = malloc(strlen(lmod_dir)+ strlen(path) + 23);
+    char* cmd = malloc(strlen(lmod_dir)+ strlen(path) + 24);
     sprintf(cmd, "%s/%s %s", lmod_dir, "spider -o spider-json", path);
     FILE* pf = popen(cmd, "r");
 
