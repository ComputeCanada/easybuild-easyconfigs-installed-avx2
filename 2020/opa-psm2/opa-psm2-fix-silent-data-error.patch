From 931a8271916eba93f08787ba1c3c0809e20f7a17 Mon Sep 17 00:00:00 2001
From: Brendan Cunningham <bcunningham@cornelisnetworks.com>
Date: Wed, 24 Aug 2022 23:38:04 -0400
Subject: [PATCH] Fix silent data error on FECN-marked TID packet for unaligned
 receive.

When a TID-receive packet is marked with the FECN bit, PSM2 is
responsible for copying the payload to the destination memory rather
than the TID hardware.

This TID-FECN path in PSM2 did not account for unaligned receive
buffers, buffers whose start address is not a 4B multiple. As a result,
the payload would be copied to a location 1-3 bytes off from the correct
location.

Fix in this commit accounts for unaligned buffer start and copies data
to correct location.

FECN-marking only occurs when OPA Congestion Control Architecture (CCA)
is enabled on the fabric. Only OPA users who have explicitly enabled the
CCA feature via the FM XML are exposed to this issue.

Bump PSM2 version to 11.2.230 to distinguish libpsm2 with this fix from
prior versions.

Fixes cornelisnetworks/opa-psm2#64.

Signed-off-by: Brendan Cunningham <bcunningham@cornelisnetworks.com>
---
 ptl_ips/ips_proto_expected.c | 14 +++++++++-----
 rpm_release_extension        |  2 +-
 2 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/ptl_ips/ips_proto_expected.c b/ptl_ips/ips_proto_expected.c
index d3d275f..b25b2a3 100644
--- a/ptl_ips/ips_proto_expected.c
+++ b/ptl_ips/ips_proto_expected.c
@@ -920,11 +920,15 @@ int ips_protoexp_data(struct ips_recvhdrq_event *rcv_ev)
 	 * assert(0 < paylen < MTU).
 	 */
 	if (psmi_hal_has_cap(PSM_HAL_CAP_RSM_FECN_SUPP) &&
-	    ips_recvhdrq_event_payload(rcv_ev) &&
-	    ips_recvhdrq_event_paylen(rcv_ev))
-		psmi_mq_mtucpy(tidrecvc->buffer + p_hdr->exp_offset,
-			       ips_recvhdrq_event_payload(rcv_ev),
-			       ips_recvhdrq_event_paylen(rcv_ev));
+			ips_recvhdrq_event_payload(rcv_ev) &&
+			ips_recvhdrq_event_paylen(rcv_ev)) {
+
+		psmi_assert(p_hdr->exp_offset + ips_recvhdrq_event_paylen(rcv_ev) <= tidrecvc->recv_tidbytes);
+
+		psmi_mq_mtucpy(tidrecvc->buffer + tidrecvc->tid_list.tsess_unaligned_start + p_hdr->exp_offset,
+			ips_recvhdrq_event_payload(rcv_ev),
+			ips_recvhdrq_event_paylen(rcv_ev));
+	}
 
 	/* If last packet then we are done. We send a tid transfer completion
 	 * packet back to sender, free all tids and close the current tidflow
